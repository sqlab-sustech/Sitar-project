diff --git a/core/sis-metadata/src/main/java/org/apache/sis/metadata/AbstractMetadata.java b/core/sis-metadata/src/main/java/org/apache/sis/metadata/AbstractMetadata.java
index c2e363abe..58c013144 100644
--- a/core/sis-metadata/src/main/java/org/apache/sis/metadata/AbstractMetadata.java
+++ b/core/sis-metadata/src/main/java/org/apache/sis/metadata/AbstractMetadata.java
@@ -71,7 +71,7 @@ import org.apache.sis.util.collection.TreeTable;
  *
  * @author  Martin Desruisseaux (Geomatys)
  * @since   0.3
- * @version 0.5
+ * @version 0.8
  * @module
  *
  * @see MetadataStandard
@@ -98,9 +98,8 @@ public abstract class AbstractMetadata implements LenientComparable, Emptiable {
     public abstract MetadataStandard getStandard();
 
     /**
-     * Returns the metadata interface implemented by this class. It should be one of the
-     * interfaces defined in the {@linkplain #getStandard() metadata standard} implemented
-     * by this class.
+     * Returns the metadata interface implemented by this class. It should be one of the interfaces
+     * defined in the {@linkplain #getStandard() metadata standard} implemented by this class.
      *
      * @return the standard interface implemented by this implementation class.
      *
@@ -127,7 +126,7 @@ public abstract class AbstractMetadata implements LenientComparable, Emptiable {
      *
      * <div class="section">Note for implementors</div>
      * The default implementation uses Java reflection indirectly, by iterating over all entries
-     * returned by {@link MetadataStandard#asValueMap(Object, KeyNamePolicy, ValueExistencePolicy)}.
+     * returned by {@link MetadataStandard#asValueMap(Object, Class, KeyNamePolicy, ValueExistencePolicy)}.
      * Subclasses that override this method should usually not invoke {@code super.isEmpty()},
      * because the Java reflection will discover and process the properties defined in the
      * subclasses - which is usually not the intend when overriding a method.
@@ -147,7 +146,7 @@ public abstract class AbstractMetadata implements LenientComparable, Emptiable {
          */
         final boolean allowNull = Semaphores.queryAndSet(Semaphores.NULL_COLLECTION);
         try {
-            return Pruner.isEmpty(this, true, false);
+            return Pruner.isEmpty(this, getInterface(), true, false);
         } finally {
             if (!allowNull) {
                 Semaphores.clear(Semaphores.NULL_COLLECTION);
@@ -166,7 +165,7 @@ public abstract class AbstractMetadata implements LenientComparable, Emptiable {
         // See comment in 'isEmpty()' about NULL_COLLECTION semaphore purpose.
         final boolean allowNull = Semaphores.queryAndSet(Semaphores.NULL_COLLECTION);
         try {
-            Pruner.isEmpty(this, true, true);
+            Pruner.isEmpty(this, getInterface(), true, true);
         } finally {
             if (!allowNull) {
                 Semaphores.clear(Semaphores.NULL_COLLECTION);
@@ -204,15 +203,15 @@ public abstract class AbstractMetadata implements LenientComparable, Emptiable {
      * The default implementation is equivalent to the following method call:
      *
      * {@preformat java
-     *   return getStandard().asValueMap(this, KeyNamePolicy.JAVABEANS_PROPERTY, ValueExistencePolicy.NON_EMPTY);
+     *   return getStandard().asValueMap(this, null, KeyNamePolicy.JAVABEANS_PROPERTY, ValueExistencePolicy.NON_EMPTY);
      * }
      *
      * @return a view of this metadata object as a map.
      *
-     * @see MetadataStandard#asValueMap(Object, KeyNamePolicy, ValueExistencePolicy)
+     * @see MetadataStandard#asValueMap(Object, Class, KeyNamePolicy, ValueExistencePolicy)
      */
     public Map<String,Object> asMap() {
-        return getStandard().asValueMap(this, KeyNamePolicy.JAVABEANS_PROPERTY, ValueExistencePolicy.NON_EMPTY);
+        return getStandard().asValueMap(this, null, KeyNamePolicy.JAVABEANS_PROPERTY, ValueExistencePolicy.NON_EMPTY);
     }
 
     /**
@@ -272,15 +271,15 @@ public abstract class AbstractMetadata implements LenientComparable, Emptiable {
      * The default implementation is equivalent to the following method call:
      *
      * {@preformat java
-     *   return getStandard().asTreeTable(this, ValueExistencePolicy.NON_EMPTY);
+     *   return getStandard().asTreeTable(this, null, ValueExistencePolicy.NON_EMPTY);
      * }
      *
      * @return a tree table representation of the specified metadata.
      *
-     * @see MetadataStandard#asTreeTable(Object, ValueExistencePolicy)
+     * @see MetadataStandard#asTreeTable(Object, Class, ValueExistencePolicy)
      */
     public TreeTable asTreeTable() {
-        return getStandard().asTreeTable(this, ValueExistencePolicy.NON_EMPTY);
+        return getStandard().asTreeTable(this, null, ValueExistencePolicy.NON_EMPTY);
     }
 
     /**