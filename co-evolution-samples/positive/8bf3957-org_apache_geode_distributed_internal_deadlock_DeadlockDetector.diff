diff --git a/geode-core/src/main/java/org/apache/geode/distributed/internal/deadlock/DeadlockDetector.java b/geode-core/src/main/java/org/apache/geode/distributed/internal/deadlock/DeadlockDetector.java
index 65a521a8b7..6806288d10 100644
--- a/geode-core/src/main/java/org/apache/geode/distributed/internal/deadlock/DeadlockDetector.java
+++ b/geode-core/src/main/java/org/apache/geode/distributed/internal/deadlock/DeadlockDetector.java
@@ -1,18 +1,16 @@
 /*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
  */
 package org.apache.geode.distributed.internal.deadlock;
 
@@ -39,22 +37,20 @@ import java.util.Set;
 
 /**
  * A class used for detecting deadlocks. The static method
- * {@link #collectAllDependencies(Serializable)} will find all dependencies
- * between threads and locks in the current VM.
+ * {@link #collectAllDependencies(Serializable)} will find all dependencies between threads and
+ * locks in the current VM.
  * 
- * To use this class, collect dependencies in each VM you want to analyze, and
- * add them to an instance of a {@link DeadlockDetector} using the
- * {@link #addDependencies(Set)} method. The {@link #findDeadlock()} method will
- * analyze the dependencies to find any deadlocks.
+ * To use this class, collect dependencies in each VM you want to analyze, and add them to an
+ * instance of a {@link DeadlockDetector} using the {@link #addDependencies(Set)} method. The
+ * {@link #findDeadlock()} method will analyze the dependencies to find any deadlocks.
  * 
- * This class uses Java 1.6 management APIs on {@link ThreadMXBean}, so it will
- * not find any deadlocks in 1.5 VM. It also uses the
- * {@link DependencyMonitorManager} framework to collect dependencies that are
- * not reported by the VM - such as the association between message senders and
- * processors in different VMs.
+ * This class uses Java 1.6 management APIs on {@link ThreadMXBean}, so it will not find any
+ * deadlocks in 1.5 VM. It also uses the {@link DependencyMonitorManager} framework to collect
+ * dependencies that are not reported by the VM - such as the association between message senders
+ * and processors in different VMs.
  * 
- * This class also has a main() method that can read serialized DependencyGraphs
- * from multiple JVMs, merge them and perform various analysis on them.
+ * This class also has a main() method that can read serialized DependencyGraphs from multiple JVMs,
+ * merge them and perform various analysis on them.
  * 
  * 
  */
@@ -66,20 +62,18 @@ public class DeadlockDetector {
   }
 
   /**
-   * Add a set of dependencies to the dependency graph to
-   * be analyzed.
+   * Add a set of dependencies to the dependency graph to be analyzed.
    */
   public void addDependencies(Set<Dependency> dependencies) {
     graph.addEdges(dependencies);
   }
 
   /**
-   * Finds the first deadlock in the list of dependencies, or null if there are
-   * no deadlocks in the set of dependencies.
+   * Finds the first deadlock in the list of dependencies, or null if there are no deadlocks in the
+   * set of dependencies.
    * 
-   * @return a linked list of dependencies which shows the circular
-   *         dependencies. The List will be of the form Dependency(A,B),
-   *         Dependency(B,C), Dependency(C, A).
+   * @return a linked list of dependencies which shows the circular dependencies. The List will be
+   *         of the form Dependency(A,B), Dependency(B,C), Dependency(C, A).
    */
   public LinkedList<Dependency> findDeadlock() {
     return graph.findCycle();
@@ -100,17 +94,16 @@ public class DeadlockDetector {
   }
 
   /**
-   * Collect all of the dependencies that exist between threads in this VM,
-   * using java management beans and the {@link DependencyMonitor}.
+   * Collect all of the dependencies that exist between threads in this VM, using java management
+   * beans and the {@link DependencyMonitor}.
    * 
    * Threads may depend on locks, or on other resources that are tracked by the
    * {@link DependencyMonitor}.
    * 
-   * @param locality a name tag to stick on entities to help associate them with
-   * this JVM and distinguish them from entities from other jvms
+   * @param locality a name tag to stick on entities to help associate them with this JVM and
+   *        distinguish them from entities from other jvms
    * 
-   * @return All of the dependencies between threads and locks or other resources
-   *         on this VM.
+   * @return All of the dependencies between threads and locks or other resources on this VM.
    */
   public static Set<Dependency> collectAllDependencies(Serializable locality) {
     ThreadMXBean bean = ManagementFactory.getThreadMXBean();
@@ -126,14 +119,14 @@ public class DeadlockDetector {
       }
 
       for (LockInfo monitor : info.getLockedMonitors()) {
-        Dependency dependency = new Dependency(new LocalLockInfo(locality,
-            monitor), new LocalThread(locality, info));
+        Dependency dependency =
+            new Dependency(new LocalLockInfo(locality, monitor), new LocalThread(locality, info));
         results.add(dependency);
       }
 
       for (LockInfo sync : info.getLockedSynchronizers()) {
-        Dependency dependency = new Dependency(
-            new LocalLockInfo(locality, sync), new LocalThread(locality, info));
+        Dependency dependency =
+            new Dependency(new LocalLockInfo(locality, sync), new LocalThread(locality, info));
         results.add(dependency);
       }
 
@@ -147,76 +140,76 @@ public class DeadlockDetector {
       threadInfos.put(info.getThreadId(), info);
     }
 
-    Set<Dependency> monitoredDependencies = collectFromDependencyMonitor(bean,
-        locality, threadInfos);
+    Set<Dependency> monitoredDependencies =
+        collectFromDependencyMonitor(bean, locality, threadInfos);
     results.addAll(monitoredDependencies);
     return results;
   }
-  
+
   /**
    * Format deadlock displaying to a user.
    */
   public static String prettyFormat(Collection<Dependency> deadlock) {
     StringBuilder text = new StringBuilder();
     LinkedHashSet<LocalThread> threads = new LinkedHashSet<LocalThread>();
-    
+
     Set<Object> seenDependers = new HashSet<>();
     Object lastDependsOn = text;
     Object lastDepender = text;
-    
+
     for (Dependency dep : deadlock) {
       Object depender = dep.getDepender();
       Object dependsOn = dep.getDependsOn();
-      
+
       String dependerString;
       if (lastDependsOn.equals(depender)) {
         dependerString = "which";
-      } else if (lastDepender.equals(depender)){
+      } else if (lastDepender.equals(depender)) {
         dependerString = "and";
       } else {
         dependerString = String.valueOf(depender);
       }
       lastDepender = depender;
       lastDependsOn = dependsOn;
-      
-      String also = seenDependers.contains(depender)? " also" : "";
+
+      String also = seenDependers.contains(depender) ? " also" : "";
       seenDependers.add(depender);
-      
+
       if (depender instanceof LocalThread) {
-        text.append(dependerString).append(" is").append(also).append(" waiting on ").append(dependsOn).append("\n");
+        text.append(dependerString).append(" is").append(also).append(" waiting on ")
+            .append(dependsOn).append("\n");
         threads.add((LocalThread) depender);
       } else if (dependsOn instanceof LocalThread) {
         text.append(dependerString).append(" is held by thread ").append(dependsOn).append("\n");
         threads.add((LocalThread) dependsOn);
       } else {
-        text.append(dependerString).append(" is").append(also).append(" waiting for ").append(dependsOn).append("\n");
+        text.append(dependerString).append(" is").append(also).append(" waiting for ")
+            .append(dependsOn).append("\n");
       }
       text.append("\n");
     }
 
     text.append("\nStack traces for involved threads\n");
     for (LocalThread threadInfo : threads) {
-      text.append(threadInfo.getLocatility())
-          .append(":")
-          .append(threadInfo.getThreadStack())
+      text.append(threadInfo.getLocatility()).append(":").append(threadInfo.getThreadStack())
           .append("\n\n");
     }
 
     return text.toString();
   }
-  
-  
+
+
   /**
-   * attempts to sort the given dependencies according to their contents
-   * so that dependents come after dependers.
-   * @param dependencies
-   * TODO this method needs more work
+   * attempts to sort the given dependencies according to their contents so that dependents come
+   * after dependers.
+   * 
+   * @param dependencies TODO this method needs more work
    */
   public static List<Dependency> sortDependencies(Collection<Dependency> dependencies) {
     List<Dependency> result = new LinkedList<>();
-    for (Dependency dep: dependencies) {
+    for (Dependency dep : dependencies) {
       boolean added = false;
-      for (int i=0; i<result.size(); i++) {
+      for (int i = 0; i < result.size(); i++) {
         Dependency other = result.get(i);
         if (other.depender.equals(dep.depender)) {
           result.add(i, dep);
@@ -244,24 +237,21 @@ public class DeadlockDetector {
   }
 
   /**
-   * Get an object suitable for querying the findDependencies method for a given
-   * thread.
+   * Get an object suitable for querying the findDependencies method for a given thread.
    */
-  public static ThreadReference getThreadReference(String locality,
-      Thread thread) {
+  public static ThreadReference getThreadReference(String locality, Thread thread) {
     ThreadMXBean bean = ManagementFactory.getThreadMXBean();
     ThreadInfo info = bean.getThreadInfo(thread.getId(), Integer.MAX_VALUE);
     return new LocalThread(locality, info);
   }
-  
-  private static Set<Dependency> collectFromDependencyMonitor(
-      ThreadMXBean bean, Serializable locality,
-      Map<Long, ThreadInfo> threadInfos) {
+
+  private static Set<Dependency> collectFromDependencyMonitor(ThreadMXBean bean,
+      Serializable locality, Map<Long, ThreadInfo> threadInfos) {
     HashSet<Dependency> results = new HashSet<Dependency>();
 
     // Convert the held resources into serializable dependencies
-    Set<Dependency<Serializable, Thread>> heldResources = DependencyMonitorManager
-        .getHeldResources();
+    Set<Dependency<Serializable, Thread>> heldResources =
+        DependencyMonitorManager.getHeldResources();
     for (Dependency<Serializable, Thread> dep : heldResources) {
       Thread thread = dep.getDependsOn();
       Serializable resource = dep.getDepender();
@@ -269,13 +259,13 @@ public class DeadlockDetector {
       if (info == null) {
         info = bean.getThreadInfo(thread.getId());
       }
-      if(info != null) {
+      if (info != null) {
         results.add(new Dependency(resource, new LocalThread(locality, info)));
       }
     }
-    
-    Set<Dependency<Thread, Serializable>> blockedThreads = DependencyMonitorManager
-    .getBlockedThreads();
+
+    Set<Dependency<Thread, Serializable>> blockedThreads =
+        DependencyMonitorManager.getBlockedThreads();
 
     // Convert the blocked threads into serializable dependencies
     for (Dependency<Thread, Serializable> dep : blockedThreads) {
@@ -289,16 +279,16 @@ public class DeadlockDetector {
     }
     return results;
   }
-  
+
   private static DependencyGraph loadGraphs(int startingAt, String... mainArgs) throws Exception {
     String filename;
-    if (mainArgs.length < startingAt+1) {
+    if (mainArgs.length < startingAt + 1) {
       return loadGraph("thread_dependency_graph.ser");
     }
-    
+
     DependencyGraph result = new DependencyGraph();
-    
-    for (int i=startingAt; i<mainArgs.length; i++) {
+
+    for (int i = startingAt; i < mainArgs.length; i++) {
       filename = mainArgs[i];
       DependencyGraph gr = loadGraph(filename);
       if (gr == null) {
@@ -306,10 +296,10 @@ public class DeadlockDetector {
       }
       result.addEdges(gr.getEdges());
     }
-    
+
     return result;
   }
-  
+
   private static DependencyGraph loadGraph(String filename) throws Exception {
     File file = new File(filename);
     if (!file.exists()) {
@@ -317,7 +307,8 @@ public class DeadlockDetector {
       System.exit(-1);
     }
 
-    ObjectInputStream ois = new DDObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
+    ObjectInputStream ois =
+        new DDObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
     DependencyGraph graph = (DependencyGraph) ois.readObject();
 
     return graph;
@@ -326,20 +317,22 @@ public class DeadlockDetector {
   private static class DDObjectInputStream extends ObjectInputStream {
 
     /**
-     * Creates a new <code>DDObjectInputStream</code> that delegates
-     * its behavior to a given <code>InputStream</code>.
+     * Creates a new <code>DDObjectInputStream</code> that delegates its behavior to a given
+     * <code>InputStream</code>.
      */
     public DDObjectInputStream(InputStream stream) throws IOException {
       super(stream);
     }
 
     @Override
-    protected Class resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
+    protected Class resolveClass(ObjectStreamClass desc)
+        throws IOException, ClassNotFoundException {
 
       String className = desc.getName();
       if (className.startsWith("com.gemstone.gemfire")) {
         className = "org.apache.geode" + className.substring("com.gemstone.gemfire".length());
-      } try {
+      }
+      try {
         Class clazz = Class.forName(className);
         return clazz;
       } catch (ClassNotFoundException ex) {
@@ -356,9 +349,11 @@ public class DeadlockDetector {
     System.out.println("[print | findImpasse | findCycle | findObject objectName ] file1 ...");
     System.out.println();
     System.out.println("print - prints all dependencies and threads in the graph");
-    System.out.println("findImpasse - looks for either a deadlock or the longest call chain in the graph");
+    System.out.println(
+        "findImpasse - looks for either a deadlock or the longest call chain in the graph");
     System.out.println("findCycle - looks for a deadlock");
-    System.out.println("findObject - finds the given object (thread, lock, message) by name/partial name and finds all call chains leading to that object");
+    System.out.println(
+        "findObject - finds the given object (thread, lock, message) by name/partial name and finds all call chains leading to that object");
   }
 
   public static void main(String... args) throws Exception {
@@ -366,56 +361,57 @@ public class DeadlockDetector {
       printHelp();
       return;
     }
-    
+
     DependencyGraph graph;
 
     switch (args[0]) {
-    case "print":
-      graph = loadGraphs(1, args);
-      System.out.println(prettyFormat(graph));
-      break;
-    case "findCycle":
-      graph = loadGraphs(1, args);
-      List<Dependency> cycle = graph.findCycle();
-      if (cycle == null) {
-        System.out.println("no deadlock found");
-      } else {
-        System.out.println("deadlocked threads: \n" + cycle);
-      }
-      break;
-    case "findImpasse":
-      graph = loadGraphs(1, args);
-      graph = graph.findLongestCallChain();
-      if (graph == null) {
-        System.out.println("no long call chain could be found!");
-      } else {
-        System.out.println("longest call chain: \n" + prettyFormat(graph));
-      }
-      break;
-    case "findObject":
-      graph = loadGraphs(2, args);
-      List<DependencyGraph> graphs = graph.findDependenciesWith(args[1]);
-      if (graphs.isEmpty()) {
-        System.out.println("thread not found! Try using the print command to see all threads and locate the name of the one you're interested in?");
-      } else {
-        int numGraphs = graphs.size();
-        int i=0;
-        System.out.println("findObject \"" + args[1]+"\"\n\n");
-        for (DependencyGraph g: graphs) {
-          i += 1;
-          System.out.println("graph " + i + " of " + numGraphs + ":");
-          System.out.println(prettyFormat(sortDependencies(g.getEdges())));
-          if (i < numGraphs) {
-            System.out.println("\n\n\n");
+      case "print":
+        graph = loadGraphs(1, args);
+        System.out.println(prettyFormat(graph));
+        break;
+      case "findCycle":
+        graph = loadGraphs(1, args);
+        List<Dependency> cycle = graph.findCycle();
+        if (cycle == null) {
+          System.out.println("no deadlock found");
+        } else {
+          System.out.println("deadlocked threads: \n" + cycle);
+        }
+        break;
+      case "findImpasse":
+        graph = loadGraphs(1, args);
+        graph = graph.findLongestCallChain();
+        if (graph == null) {
+          System.out.println("no long call chain could be found!");
+        } else {
+          System.out.println("longest call chain: \n" + prettyFormat(graph));
+        }
+        break;
+      case "findObject":
+        graph = loadGraphs(2, args);
+        List<DependencyGraph> graphs = graph.findDependenciesWith(args[1]);
+        if (graphs.isEmpty()) {
+          System.out.println(
+              "thread not found! Try using the print command to see all threads and locate the name of the one you're interested in?");
+        } else {
+          int numGraphs = graphs.size();
+          int i = 0;
+          System.out.println("findObject \"" + args[1] + "\"\n\n");
+          for (DependencyGraph g : graphs) {
+            i += 1;
+            System.out.println("graph " + i + " of " + numGraphs + ":");
+            System.out.println(prettyFormat(sortDependencies(g.getEdges())));
+            if (i < numGraphs) {
+              System.out.println("\n\n\n");
+            }
           }
         }
-      }
-      break;
-    default:
-      printHelp();
-      break;
+        break;
+      default:
+        printHelp();
+        break;
     }
-    
+
   }
-  
+
 }