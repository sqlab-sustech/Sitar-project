diff --git a/service/src/main/java/io/mifos/rhythm/service/internal/scheduler/Drummer.java b/service/src/main/java/io/mifos/rhythm/service/internal/scheduler/Drummer.java
index a242e67..1dfefc5 100644
--- a/service/src/main/java/io/mifos/rhythm/service/internal/scheduler/Drummer.java
+++ b/service/src/main/java/io/mifos/rhythm/service/internal/scheduler/Drummer.java
@@ -21,13 +21,14 @@ import io.mifos.rhythm.service.internal.repository.BeatEntity;
 import io.mifos.rhythm.service.internal.repository.BeatRepository;
 import io.mifos.rhythm.service.internal.service.BeatPublisherService;
 import org.slf4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.dao.InvalidDataAccessResourceUsageException;
 import org.springframework.scheduling.annotation.Scheduled;
 import org.springframework.stereotype.Component;
 import org.springframework.transaction.annotation.Transactional;
 
-import javax.annotation.Nullable;
+import javax.annotation.Nonnull;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 import java.time.temporal.ChronoUnit;
@@ -44,6 +45,7 @@ public class Drummer {
   private final BeatRepository beatRepository;
   private final Logger logger;
 
+  @Autowired
   public Drummer(
           final BeatPublisherService beatPublisherService,
           final BeatRepository beatRepository,
@@ -63,7 +65,14 @@ public class Drummer {
       final Stream<BeatEntity> beats =
               Stream.concat(beatRepository.findByAlignmentHour(alignmentHour),
                       beatRepository.findByAlignmentHour(minus1(alignmentHour)));
-      beats.forEach((beat) -> checkBeatForPublish(beat, now));
+      beats.forEach((beat) -> {
+        final Optional<LocalDateTime> nextBeat = checkBeatForPublish(beat, now);
+        nextBeat.ifPresent(x -> {
+          beat.setNextBeat(x);
+          beatRepository.save(beat);
+        });
+      });
+
     }
     catch (final InvalidDataAccessResourceUsageException e) {
       logger.info("InvalidDataAccessResourceUsageException in check for scheduled beats, probably " +
@@ -75,45 +84,30 @@ public class Drummer {
     return alignmentHour != 0 ? alignmentHour-1 : 23;
   }
 
-  public void checkBeatForPublish(final BeatEntity beat, final LocalDateTime now) {
+  private Optional<LocalDateTime> checkBeatForPublish(final BeatEntity beat, final LocalDateTime now) {
     try (final AutoTenantContext ignored = new AutoTenantContext((beat.getTenantIdentifier()))) {
-      final LocalDateTime topOfToday = now.truncatedTo(ChronoUnit.DAYS);
-      final LocalDateTime mostRecentEventRequired = topOfToday.plusHours(beat.getAlignmentHour());
 
       logger.info("Checking if beat {} needs publishing.", beat);
 
-      final Optional<LocalDateTime> firstLocalDatetimeNotPublished
-              = getTimesNeedingEvents(beat.getLastPublishedFor(), mostRecentEventRequired, beat.getAlignmentHour())
-              .filter(x -> {
-                if (beatPublisherService.publishBeat(beat.getApplicationName(), beat.getBeatIdentifier(), x)) {
-                  beat.setLastPublishedFor(x);
-                  beatRepository.save(beat);
-                  return false;
-                }
-                return true;
-              })
+      return getTimesNeedingEvents(beat.getNextBeat(), now, beat.getAlignmentHour())
+              .filter(x ->
+                      x.isAfter(now)
+                      || !beatPublisherService.publishBeat(beat.getApplicationName(), beat.getBeatIdentifier(), x))
               .findFirst();
-
-      firstLocalDatetimeNotPublished.ifPresent(x ->
-              logger.warn("Failed to publish the beat {} for all time stamps after and including {} ", beat, x));
     }
   }
 
   static Stream<LocalDateTime> getTimesNeedingEvents(
-          final @Nullable LocalDateTime lastEventTime,
-          final LocalDateTime mostRecentEventRequired,
+          final @Nonnull LocalDateTime nextBeat,
+          final LocalDateTime now,
           final Integer alignmentHour) {
-    if (lastEventTime == null) {
-      return Stream.of(mostRecentEventRequired);
-    }
-
-    if (lastEventTime.compareTo(mostRecentEventRequired) >= 0) {
-      return Stream.empty();
+    if (nextBeat.isAfter(now)) {
+      return Stream.of(nextBeat);
     }
 
-    final long days = lastEventTime.until(mostRecentEventRequired, ChronoUnit.DAYS);
-    return Stream.iterate(incrementToAlignment(lastEventTime, alignmentHour),
-            (lastPublishDate) -> incrementToAlignment(lastPublishDate, alignmentHour))
+    final long days = nextBeat.until(now, ChronoUnit.DAYS) + 2;
+    return Stream.iterate(nextBeat,
+            x -> incrementToAlignment(x, alignmentHour))
             .limit(days);
   }
 