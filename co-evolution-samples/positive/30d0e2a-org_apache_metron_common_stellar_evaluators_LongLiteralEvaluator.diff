diff --git a/metron-platform/metron-common/src/main/java/org/apache/metron/common/stellar/evaluators/LongLiteralEvaluator.java b/metron-platform/metron-common/src/main/java/org/apache/metron/common/stellar/evaluators/LongLiteralEvaluator.java
index 05ee1624..338adc4b 100644
--- a/metron-platform/metron-common/src/main/java/org/apache/metron/common/stellar/evaluators/LongLiteralEvaluator.java
+++ b/metron-platform/metron-common/src/main/java/org/apache/metron/common/stellar/evaluators/LongLiteralEvaluator.java
@@ -20,11 +20,12 @@ package org.apache.metron.common.stellar.evaluators;
 
 import org.apache.metron.common.dsl.ParseException;
 import org.apache.metron.common.dsl.Token;
+import org.apache.metron.common.stellar.FrameContext;
 import org.apache.metron.common.stellar.generated.StellarParser;
 
 public class LongLiteralEvaluator implements NumberEvaluator<StellarParser.LongLiteralContext> {
   @Override
-  public Token<Long> evaluate(StellarParser.LongLiteralContext context) {
+  public Token<Long> evaluate(StellarParser.LongLiteralContext context, FrameContext.Context contextVariety) {
     if (context == null) {
       throw new IllegalArgumentException("Cannot evaluate a context that is null.");
     }
@@ -32,7 +33,7 @@ public class LongLiteralEvaluator implements NumberEvaluator<StellarParser.LongL
     String value = context.getText();
     if (value.endsWith("l") || value.endsWith("L")) {
       value = value.substring(0, value.length() - 1); // Drop the 'L' or 'l'. Long.parseLong does not accept a string with either of these.
-      return new Token<>(Long.parseLong(value), Long.class);
+      return new Token<>(Long.parseLong(value), Long.class, contextVariety);
     } else {
       // Technically this should never happen, but just being safe.
       throw new ParseException("Invalid format for long. Failed trying to parse a long with the following value: " + value);