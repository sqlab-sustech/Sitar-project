diff --git a/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/sort/MergeIterator.java b/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/sort/MergeIterator.java
index 0c256ebbee..2177f57355 100644
--- a/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/sort/MergeIterator.java
+++ b/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/sort/MergeIterator.java
@@ -15,98 +15,128 @@
 
 package eu.stratosphere.pact.runtime.sort;
 
+import java.io.IOException;
 import java.util.Comparator;
-import java.util.Iterator;
 import java.util.List;
 
 import eu.stratosphere.pact.common.type.Key;
-import eu.stratosphere.pact.common.type.KeyValuePair;
-import eu.stratosphere.pact.common.type.Value;
+import eu.stratosphere.pact.common.type.PactRecord;
+import eu.stratosphere.pact.common.util.InstantiationUtil;
+import eu.stratosphere.pact.runtime.util.ReadingIterator;
 
 /**
  * @author Erik Nijkamp
- * @param <K>
- * @param <V>
+ * @author Stephan Ewen
  */
-public class MergeIterator<K extends Key, V extends Value> implements Iterator<KeyValuePair<K, V>> {
-	private final class HeadStream {
-		private final Iterator<KeyValuePair<K, V>> iterator;
+public class MergeIterator implements ReadingIterator<PactRecord>
+{
+	private final PartialOrderPriorityQueue<HeadStream> heap;
 
-		private KeyValuePair<K, V> head;
+	
+	public MergeIterator(List<ReadingIterator<PactRecord>> iterators, Comparator<Key>[] comparators,
+			int[] keyPositions, Class<? extends Key>[] keyClasses)
+	throws IOException
+	{
+		this.heap = new PartialOrderPriorityQueue<HeadStream>(new HeadStreamComparator(comparators), iterators.size());
+		
+		for (ReadingIterator<PactRecord> iterator : iterators) {
+			heap.add(new HeadStream(iterator, keyPositions, keyClasses));
+		}
+	}
 
-		public HeadStream(Iterator<KeyValuePair<K, V>> iterator) {
+	@Override
+	public PactRecord next(PactRecord target) throws IOException
+	{
+		if (this.heap.size() > 0) {
+			// get the smallest element
+			HeadStream top = heap.peek();
+			PactRecord head = top.getHead();
+			
+			// read an element
+			if (!top.nextHead(target)) {
+				heap.poll();
+			}
+			heap.adjustTop();
+			
+			return head;
+		}
+		else {
+			return null;
+		}
+	}
+
+	// ============================================================================================
+	//                      Internal Classes that wrap the sorted input streams
+	// ============================================================================================
+	
+	private static final class HeadStream
+	{
+		private final ReadingIterator<PactRecord> iterator;
+
+		private final Key[] keyHolders;
+		
+		private final int[] keyPositions;
+		
+		private PactRecord head;
+
+		public HeadStream(ReadingIterator<PactRecord> iterator, int[] keyPositions, Class<? extends Key>[] keyClasses)
+		throws IOException
+		{
 			this.iterator = iterator;
-			if (!nextHead())
+			this.keyPositions = keyPositions;
+		
+			// instantiate the array that caches the key objects
+			this.keyHolders = new Key[keyClasses.length];
+			for (int i = 0; i < keyClasses.length; i++) {
+				if (keyClasses[i] == null) {
+					throw new NullPointerException("Key type " + i + " is null.");
+				}
+				this.keyHolders[i] = InstantiationUtil.instantiate(keyClasses[i], Key.class);
+			}
+			
+			if (!nextHead(new PactRecord()))
 				throw new IllegalStateException();
 		}
 
-		public KeyValuePair<K, V> getHead() {
-			return head;
+		public PactRecord getHead() {
+			return this.head;
 		}
 
-		public boolean nextHead() {
-			if (iterator.hasNext()) {
-				head = iterator.next();
-				return true;
-			} else {
+		public boolean nextHead(PactRecord toUse) throws IOException {
+			this.head = iterator.next(toUse);
+			if (this.head == null) {
 				return false;
 			}
+			this.head.getFieldsInto(this.keyPositions, this.keyHolders);
+			return true;
 		}
 	}
 
-	private final class HeadStreamComparator implements Comparator<HeadStream> {
+	// --------------------------------------------------------------------------------------------
+	
+	private final class HeadStreamComparator implements Comparator<HeadStream>
+	{
 		/**
-		 * The comparator providing the comparison operator for key-value-pairs.
+		 * The comparators providing the comparison for the different key fields.
 		 */
-		private final Comparator<K> comparator;
+		private final Comparator<Key>[] comparators;
 
-		public HeadStreamComparator(Comparator<K> comparator) {
-			this.comparator = comparator;
+		
+		public HeadStreamComparator(Comparator<Key>[] comparators) {
+			this.comparators = comparators;
 		}
 
+		
 		@Override
-		public int compare(HeadStream o1, HeadStream o2) {
-			return comparator.compare(o1.getHead().getKey(), o2.getHead().getKey());
-		}
-	}
-
-	private final PartialOrderPriorityQueue<HeadStream> heap;
-
-	public MergeIterator(List<Iterator<KeyValuePair<K, V>>> iterators, Comparator<K> comparator) {
-		this.heap = new PartialOrderPriorityQueue<HeadStream>(new HeadStreamComparator(comparator), iterators.size());
-		for (Iterator<KeyValuePair<K, V>> iterator : iterators) {
-			heap.add(new HeadStream(iterator));
-		}
-	}
-
-	@Override
-	public boolean hasNext() {
-		return heap.size() != 0;
-	}
-
-	@Override
-	public KeyValuePair<K, V> next() {
-		// get the smallest element
-		HeadStream top = heap.peek();
-		KeyValuePair<K, V> head = top.getHead();
-
-		// read an element
-		try {
-			if (!top.nextHead()) {
-				heap.poll();
+		public int compare(HeadStream o1, HeadStream o2)
+		{
+			for (int i = 0; i < this.comparators.length; i++) {
+				int val = this.comparators[i].compare(o1.keyHolders[i], o2.keyHolders[i]);
+				if (val != 0) {
+					return val;
+				}
 			}
-		} catch (Exception e) {
-			throw new RuntimeException("Reading an element from the stream failed.", e);
+			return 0;
 		}
-
-		heap.adjustTop();
-
-		return head;
 	}
-
-	@Override
-	public void remove() {
-		throw new UnsupportedOperationException();
-	}
-
 }