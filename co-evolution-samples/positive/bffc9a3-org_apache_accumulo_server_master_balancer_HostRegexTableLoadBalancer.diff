diff --git a/server/base/src/main/java/org/apache/accumulo/server/master/balancer/HostRegexTableLoadBalancer.java b/server/base/src/main/java/org/apache/accumulo/server/master/balancer/HostRegexTableLoadBalancer.java
index 7e371b00b..905ec71f6 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/master/balancer/HostRegexTableLoadBalancer.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/master/balancer/HostRegexTableLoadBalancer.java
@@ -88,21 +88,21 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
 
   private static final Logger LOG = LoggerFactory.getLogger(HostRegexTableLoadBalancer.class);
   public static final String HOST_BALANCER_PREFIX = PROP_PREFIX + "balancer.host.regex.";
-  public static final String HOST_BALANCER_OOB_CHECK_KEY = PROP_PREFIX
-      + "balancer.host.regex.oob.period";
+  public static final String HOST_BALANCER_OOB_CHECK_KEY =
+      PROP_PREFIX + "balancer.host.regex.oob.period";
   private static final String HOST_BALANCER_OOB_DEFAULT = "5m";
-  public static final String HOST_BALANCER_REGEX_USING_IPS_KEY = PROP_PREFIX
-      + "balancer.host.regex.is.ip";
-  public static final String HOST_BALANCER_REGEX_MAX_MIGRATIONS_KEY = PROP_PREFIX
-      + "balancer.host.regex.concurrent.migrations";
+  public static final String HOST_BALANCER_REGEX_USING_IPS_KEY =
+      PROP_PREFIX + "balancer.host.regex.is.ip";
+  public static final String HOST_BALANCER_REGEX_MAX_MIGRATIONS_KEY =
+      PROP_PREFIX + "balancer.host.regex.concurrent.migrations";
   private static final int HOST_BALANCER_REGEX_MAX_MIGRATIONS_DEFAULT = 250;
   protected static final String DEFAULT_POOL = "HostTableLoadBalancer.ALL";
   private static final int DEFAULT_OUTSTANDING_MIGRATIONS = 0;
-  public static final String HOST_BALANCER_OUTSTANDING_MIGRATIONS_KEY = PROP_PREFIX
-      + "balancer.host.regex.max.outstanding.migrations";
+  public static final String HOST_BALANCER_OUTSTANDING_MIGRATIONS_KEY =
+      PROP_PREFIX + "balancer.host.regex.max.outstanding.migrations";
 
-  protected long oobCheckMillis = ConfigurationTypeHelper
-      .getTimeInMillis(HOST_BALANCER_OOB_DEFAULT);
+  protected long oobCheckMillis =
+      ConfigurationTypeHelper.getTimeInMillis(HOST_BALANCER_OOB_DEFAULT);
 
   private static final long ONE_HOUR = 60 * 60 * 1000;
   private static final Set<KeyExtent> EMPTY_MIGRATIONS = Collections.emptySet();
@@ -127,10 +127,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
    *          map of current tservers
    * @return current servers grouped by pool name, if not a match it is put into a default pool.
    */
-  // @formatter:off
   protected synchronized Map<String,SortedMap<TServerInstance,TabletServerStatus>>
-    splitCurrentByRegex(SortedMap<TServerInstance,TabletServerStatus> current) {
-  // @formatter:on
+      splitCurrentByRegex(SortedMap<TServerInstance,TabletServerStatus> current) {
     LOG.debug("Performing pool recheck - regrouping tablet servers based on regular expressions");
     Map<String,SortedMap<TServerInstance,TabletServerStatus>> newPools = new HashMap<>();
     for (Entry<TServerInstance,TabletServerStatus> e : current.entrySet()) {
@@ -262,8 +260,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
     if (migrations != null) {
       maxTServerMigrations = Integer.parseInt(migrations);
     }
-    String outstanding = conf.getSystemConfiguration()
-        .get(HOST_BALANCER_OUTSTANDING_MIGRATIONS_KEY);
+    String outstanding =
+        conf.getSystemConfiguration().get(HOST_BALANCER_OUTSTANDING_MIGRATIONS_KEY);
     if (outstanding != null) {
       this.maxOutstandingMigrations = Integer.parseInt(outstanding);
     }
@@ -318,8 +316,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
     // group the unassigned into tables
     Map<TableId,Map<KeyExtent,TServerInstance>> groupedUnassigned = new HashMap<>();
     for (Entry<KeyExtent,TServerInstance> e : unassigned.entrySet()) {
-      Map<KeyExtent,TServerInstance> tableUnassigned = groupedUnassigned
-          .get(e.getKey().getTableId());
+      Map<KeyExtent,TServerInstance> tableUnassigned =
+          groupedUnassigned.get(e.getKey().getTableId());
       if (tableUnassigned == null) {
         tableUnassigned = new HashMap<>();
         groupedUnassigned.put(e.getKey().getTableId(), tableUnassigned);
@@ -361,8 +359,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
     Map<String,String> tableIdMap = t.tableIdMap();
     long now = System.currentTimeMillis();
 
-    Map<String,SortedMap<TServerInstance,TabletServerStatus>> currentGrouped = splitCurrentByRegex(
-        current);
+    Map<String,SortedMap<TServerInstance,TabletServerStatus>> currentGrouped =
+        splitCurrentByRegex(current);
     if ((now - this.lastOOBCheck) > this.oobCheckMillis) {
       try {
         // Check to see if a tablet is assigned outside the bounds of the pool. If so, migrate it.
@@ -383,8 +381,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
               continue;
             }
             try {
-              List<TabletStats> outOfBoundsTablets = getOnlineTabletsForTable(e.getKey(),
-                  TableId.of(tid));
+              List<TabletStats> outOfBoundsTablets =
+                  getOnlineTabletsForTable(e.getKey(), TableId.of(tid));
               if (outOfBoundsTablets == null) {
                 continue;
               }
@@ -396,8 +394,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
                   continue;
                 }
                 String poolName = getPoolNameForTable(table);
-                SortedMap<TServerInstance,TabletServerStatus> currentView = currentGrouped
-                    .get(poolName);
+                SortedMap<TServerInstance,TabletServerStatus> currentView =
+                    currentGrouped.get(poolName);
                 if (currentView != null) {
                   int skip = random.nextInt(currentView.size());
                   Iterator<TServerInstance> iter = currentView.keySet().iterator();
@@ -471,8 +469,8 @@ public class HostRegexTableLoadBalancer extends TableLoadBalancer implements Con
       TableId tableId = TableId.of(s);
       String tableName = tableIdToTableName.get(tableId);
       String regexTableName = getPoolNameForTable(tableName);
-      SortedMap<TServerInstance,TabletServerStatus> currentView = currentGrouped
-          .get(regexTableName);
+      SortedMap<TServerInstance,TabletServerStatus> currentView =
+          currentGrouped.get(regexTableName);
       if (currentView == null) {
         LOG.warn("Skipping balance for table {} as no tablet servers are online.", tableName);
         continue;