diff --git a/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java b/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java
index 159e28066d..d884abf304 100644
--- a/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java
+++ b/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java
@@ -45,6 +45,8 @@ public class AvlTree<K>
 	/** node representing the end of the doubly linked list formed with the tree nodes */
     private LinkedAvlNode<K> last;
 
+    /** holds the number of nodes present in the tree */
+    private int size;
     
 	/**
 	 * Creates a new instance of AVLTree.
@@ -80,6 +82,7 @@ public class AvlTree<K>
 	      root = new LinkedAvlNode<K>( key );
 	      first = root;
 	      last = root;
+	      size = 1;
 	      return null;
 	    }
 	    
@@ -127,6 +130,8 @@ public class AvlTree<K>
         treePath.add( 0, node );
 	    balance(treePath);
 	    
+	    size++;
+	    
 	    return null;
 	}
 	
@@ -226,6 +231,7 @@ public class AvlTree<K>
             if( temp == root )
             {
               root = null;
+              size = 0;
               return key;
             }
             
@@ -299,6 +305,8 @@ public class AvlTree<K>
        treePath.add( 0, y ); // y can be null but getBalance returns 0 so np
        balance( treePath );
        
+       size--;
+       
        return key;
     }
     
@@ -381,25 +389,7 @@ public class AvlTree<K>
     //NOTE: This method is internally used by AVLTreeMarshaller
     public int getSize()
     {
-        if ( root == null )
-        {
-            return 0;
-        }
-        
-        if( root.isLeaf() )
-        {
-            return 1;
-        }
-      
-        LinkedAvlNode<K> x = first.next;
-      
-        while( x != null )
-        {
-            x.setIndex( x.previous.getIndex() + 1 );  
-            x = x.next;
-        }
-      
-        return last.getIndex() + 1;
+        return size;
     }
     
     