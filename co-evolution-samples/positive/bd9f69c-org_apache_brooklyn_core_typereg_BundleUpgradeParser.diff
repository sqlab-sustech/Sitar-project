diff --git a/core/src/main/java/org/apache/brooklyn/core/typereg/BundleUpgradeParser.java b/core/src/main/java/org/apache/brooklyn/core/typereg/BundleUpgradeParser.java
index 437fc5af9..82b02b8bc 100644
--- a/core/src/main/java/org/apache/brooklyn/core/typereg/BundleUpgradeParser.java
+++ b/core/src/main/java/org/apache/brooklyn/core/typereg/BundleUpgradeParser.java
@@ -27,19 +27,28 @@ import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.TreeSet;
 import java.util.stream.Collectors;
 
+import javax.annotation.Nonnull;
+
 import org.apache.brooklyn.api.catalog.CatalogItem;
+import org.apache.brooklyn.api.mgmt.ManagementContext;
 import org.apache.brooklyn.api.typereg.RegisteredType;
+import org.apache.brooklyn.core.mgmt.ha.OsgiManager;
+import org.apache.brooklyn.core.mgmt.internal.ManagementContextInternal;
 import org.apache.brooklyn.util.collections.MutableList;
-import org.apache.brooklyn.util.collections.MutableSet;
 import org.apache.brooklyn.util.exceptions.Exceptions;
+import org.apache.brooklyn.util.guava.Maybe;
 import org.apache.brooklyn.util.osgi.VersionedName;
+import org.apache.brooklyn.util.osgi.VersionedName.VersionedNameComparator;
 import org.apache.brooklyn.util.text.BrooklynVersionSyntax;
 import org.apache.brooklyn.util.text.QuotedStringTokenizer;
 import org.apache.brooklyn.util.text.Strings;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.VersionRange;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.VisibleForTesting;
@@ -57,6 +66,8 @@ import com.google.common.collect.Multimap;
  */
 public class BundleUpgradeParser {
 
+    private static final Logger log = LoggerFactory.getLogger(BundleUpgradeParser.class);
+    
     /**
      * A header in a bundle's manifest, indicating that this bundle will force the removal of the 
      * given legacy catalog items. Here "legacy" means those in the `/catalog` persisted state, 
@@ -80,7 +91,7 @@ public class BundleUpgradeParser {
      * </ul>
      */
     @Beta
-    public static final String MANIFEST_HEADER_FORCE_REMOVE_LEGACY_ITEMS = "brooklyn-catalog-force-remove-legacy-items";
+    public static final String MANIFEST_HEADER_FORCE_REMOVE_LEGACY_ITEMS = "Brooklyn-Catalog-Force-Remove-Legacy-Items";
 
     /**
      * A header in a bundle's manifest, indicating that this bundle will force the removal of matching 
@@ -117,7 +128,7 @@ public class BundleUpgradeParser {
      * </ul>
      */
     @Beta
-    public static final String MANIFEST_HEADER_FORCE_REMOVE_BUNDLES = "brooklyn-catalog-force-remove-bundles";
+    public static final String MANIFEST_HEADER_FORCE_REMOVE_BUNDLES = "Brooklyn-Catalog-Force-Remove-Bundles";
 
     /**
      * A header in a bundle's manifest, indicating that this bundle recommends a set of upgrades.
@@ -144,14 +155,14 @@ public class BundleUpgradeParser {
      * 
      * In most use cases, one can provide a single line, e.g. if releasing a v2.0.0:
      * 
-     * {@code brooklyn-catalog-upgrade-for-bundles: *:[0,2)}
+     * {@code Brooklyn-Catalog-Upgrade-For-Bundles: *:[0,2)}
      * 
      * to indicate that this bundle is able to upgrade all instances of this bundle lower than 2.0.0,
      * and all types in this bundle will upgrade earlier types.
      * 
      * This can be used in conjunction with:
      * 
-     * {@code brooklyn-catalog-force-remove-bundles: *:[0,2)}
+     * {@code Brooklyn-Catalog-Force-Remove-Bundles: *:[0,2)}
      * 
      * to forcibly remove older bundles at an appropriate point (eg a restart) and cause all earlier instances of the bundle
      * and the type instances they contain to be upgraded with the same-named types in the 2.0.0 bundle.
@@ -160,7 +171,7 @@ public class BundleUpgradeParser {
      * or versions are not in line with previous versions of this bundle.
      */
     @Beta
-    public static final String MANIFEST_HEADER_UPGRADE_FOR_BUNDLES = "brooklyn-catalog-upgrade-for-bundles";
+    public static final String MANIFEST_HEADER_UPGRADE_FOR_BUNDLES = "Brooklyn-Catalog-Upgrade-For-Bundles";
 
     /**
      * A header in a bundle's manifest, indicating that this bundle recommends a set of upgrades.
@@ -180,22 +191,25 @@ public class BundleUpgradeParser {
      * It is an error to omit a version/range if that header is not present or does not declare versions
      * of the same bundle being upgraded.  
      * 
-     * If this key is omitted, then the default is {@code *} if a {@link #MANIFEST_HEADER_UPGRADE_FOR_BUNDLES} header
-     * is present and empty if that header is not present.
+     * If this key is omitted but a {@link #MANIFEST_HEADER_UPGRADE_FOR_BUNDLES} header is present defining 
+     * versions of the containing bundle that are upgraded, then the default is {@code *} to give the common semantics
+     * when a bundle is upgrading previous versions that types similarly upgrade.  If that header is absent or
+     * this bundle is an upgrade for other bundles but not this bundle, then this key must be specified if
+     * any types are intended to be upgraded.
      * 
      * What this is saying in most cases is that if a bundle {@code foo:1} contains {@code foo-node:1}, and 
      * bundle {@code foo:2} contains {@code foo-node:2}, then:
-     * if {@code foo:2} declares {@code brooklyn-catalog-upgrade-for-bundles: foo:1} it will also declare that
+     * if {@code foo:2} declares {@code Brooklyn-Catalog-Upgrade-For-Bundles: foo:1} it will also declare that
      * {@code foo-node:2} upgrades {@code foo-node:1};
-     * if {@code foo:2} declares {@code brooklyn-catalog-upgrade-for-bundles: *} the same thing will occur
+     * if {@code foo:2} declares {@code Brooklyn-Catalog-Upgrade-For-Bundles: *} the same thing will occur
      * (and it would also upgrade a {@code foo:0} contains {@code foo-node:0});
-     * if {@code foo:2} declares no {@code brooklyn-catalog-upgrade} manifest headers, then no advisory
+     * if {@code foo:2} declares no {@code Brooklyn-Catalog-Upgrade-*} manifest headers, then no advisory
      * upgrades will be noted.
      * 
      * As noted in {@link #MANIFEST_HEADER_UPGRADE_FOR_BUNDLES} the primary use case for this header is type renames.
      */
     @Beta
-    public static final String MANIFEST_HEADER_UPGRADE_FOR_TYPES = "brooklyn-catalog-upgrade-for-types";
+    public static final String MANIFEST_HEADER_UPGRADE_FOR_TYPES = "Brooklyn-Catalog-Upgrade-For-Types";
 
     /**
      * The result from parsing bundle(s) to find their upgrade info.
@@ -235,6 +249,15 @@ public class BundleUpgradeParser {
             public CatalogUpgrades build() {
                 return new CatalogUpgrades(this);
             }
+            
+            public Builder clearUpgradesProvidedByType(VersionedName versionedName) {
+                upgradesProvidedByTypes.removeAll(versionedName);
+                return this;
+            }
+            public Builder clearUpgradesProvidedByBundle(VersionedName versionedName) {
+                upgradesProvidedByBundles.removeAll(versionedName);
+                return this;
+            }
         }
         
         public static Builder builder() {
@@ -288,10 +311,10 @@ public class BundleUpgradeParser {
         public Set<VersionedName> getUpgradesForType(VersionedName type) {
             return findUpgradesIn(type, upgradesProvidedByTypes);
         }
-        private static Set<VersionedName> findUpgradesIn(VersionedName bundle, Multimap<VersionedName,VersionRangedName> upgradesMap) {
-            Set<VersionedName> result = MutableSet.of();
+        private static Set<VersionedName> findUpgradesIn(VersionedName item, Multimap<VersionedName,VersionRangedName> upgradesMap) {
+            Set<VersionedName> result = new TreeSet<>(VersionedNameComparator.INSTANCE);
             for (Map.Entry<VersionedName,VersionRangedName> n: upgradesMap.entries()) {
-                if (contains(n.getValue(), bundle)) {
+                if (contains(n.getValue(), item)) {
                     result.add(n.getKey());
                 }
             }
@@ -312,6 +335,90 @@ public class BundleUpgradeParser {
         public static boolean contains(VersionRangedName range, VersionedName name) {
             return range.getSymbolicName().equals(name.getSymbolicName()) && range.getOsgiVersionRange().includes(name.getOsgiVersion());
         }
+
+        @Beta
+        public static void storeInManagementContext(CatalogUpgrades catalogUpgrades, ManagementContext managementContext) {
+            ((BasicBrooklynTypeRegistry)managementContext.getTypeRegistry()).storeCatalogUpgradesInstructions(catalogUpgrades);
+        }
+        
+        @Beta @Nonnull
+        public static CatalogUpgrades getFromManagementContext(ManagementContext managementContext) {
+            CatalogUpgrades result = ((BasicBrooklynTypeRegistry)managementContext.getTypeRegistry()).getCatalogUpgradesInstructions();
+            if (result!=null) {
+                return result;
+            }
+            return builder().build();
+        }
+
+        @Beta
+        public static String getBundleUpgradedIfNecessary(ManagementContext mgmt, String vName) {
+            if (vName==null) return null;
+            Maybe<OsgiManager> osgi = ((ManagementContextInternal)mgmt).getOsgiManager();
+            if (osgi.isAbsent()) {
+                // ignore upgrades if not osgi
+                return vName;
+            }
+            if (osgi.get().getManagedBundle(VersionedName.fromString(vName))!=null) {
+                // bundle installed, prefer that to upgrade 
+                return vName;
+            }
+            return getItemUpgradedIfNecessary(mgmt, vName, (cu,vn) -> cu.getUpgradesForBundle(vn));
+        }
+        @Beta
+        public static String getTypeUpgradedIfNecessary(ManagementContext mgmt, String vName) {
+            if (vName==null || mgmt.getTypeRegistry().get(vName)!=null) {
+                // item found (or n/a), prefer that to upgrade
+                return vName;
+            }
+            // callers should use BrooklynTags.newUpgradedFromTag if creating a spec,
+            // then warn on instantiation, done only for entities currently.
+            // (yoml will allow us to have one code path for all the different creation routines.)
+            // persistence/rebind also warns.
+            return getItemUpgradedIfNecessary(mgmt, vName, (cu,vn) -> cu.getUpgradesForType(vn));
+        }
+        
+        private interface LookupFunction {
+            public Set<VersionedName> lookup(CatalogUpgrades cu, VersionedName vn);
+        }
+        private static String getItemUpgradedIfNecessary(ManagementContext mgmt, String vName, LookupFunction lookupF) {
+            Set<VersionedName> r = lookupF.lookup(getFromManagementContext(mgmt), VersionedName.fromString(vName));
+            if (!r.isEmpty()) return r.iterator().next().toString();
+            
+            if (log.isTraceEnabled()) {
+                log.trace("Could not find '"+vName+"' and no upgrades specified; subsequent failure or warning possible unless that is a direct java class reference");
+            }
+            return vName;
+        }
+        
+        /** This method is used internally to mark places we need to update when we switch to persisting and loading
+         *  registered type IDs instead of java types, as noted on RebindIteration.load */
+        @Beta
+        public static boolean markerForCodeThatLoadsJavaTypesButShouldLoadRegisteredType() {
+            // return true if we use registered types, and update callers not to need this method
+            return false;
+        }
+        
+        @Beta
+        CatalogUpgrades withUpgradesProvidedByTypeCleared(VersionedName versionedName) {
+            return builder().addAll(this).clearUpgradesProvidedByType(versionedName).build();
+        }
+        @Beta
+        CatalogUpgrades withUpgradesProvidedByBundleCleared(VersionedName versionedName) {
+            return builder().addAll(this).clearUpgradesProvidedByBundle(versionedName).build();
+        }
+
+        @Beta
+        public static void clearTypeInStoredUpgrades(ManagementContext mgmt, VersionedName versionedName) {
+            synchronized (mgmt.getTypeRegistry()) {
+                storeInManagementContext(getFromManagementContext(mgmt).withUpgradesProvidedByTypeCleared(versionedName), mgmt);
+            }
+        }
+        @Beta
+        public static void clearBundleInStoredUpgrades(ManagementContext mgmt, VersionedName versionedName) {
+            synchronized (mgmt.getTypeRegistry()) {
+                storeInManagementContext(getFromManagementContext(mgmt).withUpgradesProvidedByBundleCleared(versionedName), mgmt);
+            }
+        }
     }
     
     /**
@@ -452,6 +559,9 @@ public class BundleUpgradeParser {
         }
         Set<VersionedName> typeSupplierNames = MutableList.copyOf(typeSupplier.get()).stream().map(
             (t) -> VersionedName.toOsgiVersionedName(t.getVersionedName())).collect(Collectors.toSet());
+        if (input==null && sourceVersions!=null && !sourceVersions.isEmpty()) {
+            input = "*";
+        }
         return parseVersionRangedNameEqualsVersionedNameList(input, false,
             // wildcard means all types, all versions of this bundle this bundle replaces
             getTypeNamesInBundle(typeSupplier), sourceVersions,