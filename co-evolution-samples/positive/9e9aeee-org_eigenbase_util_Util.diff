diff --git a/core/src/main/java/org/eigenbase/util/Util.java b/core/src/main/java/org/eigenbase/util/Util.java
index b2f58b71e..642f2e750 100644
--- a/core/src/main/java/org/eigenbase/util/Util.java
+++ b/core/src/main/java/org/eigenbase/util/Util.java
@@ -2198,28 +2198,39 @@ public Integer get(int index) {
         };
     }
 
-  /** Converts an underscore-separated name into a camelCase name.
-   * For example, {@code uncamel("MY_JDBC_DRIVER")} returns "myJdbcDriver". */
-  public static String toCamelCase(String name) {
-    StringBuilder buf = new StringBuilder();
-    int nextUpper = -1;
-    for (int i = 0; i < name.length(); i++) {
-      char c = name.charAt(i);
-      if (c == '_') {
-        nextUpper = i + 1;
-        continue;
-      }
-      if (nextUpper == i) {
-        c = Character.toUpperCase(c);
-      } else {
-        c = Character.toLowerCase(c);
-      }
-      buf.append(c);
-    }
-    return buf.toString();
-  }
-
-  //~ Inner Classes ----------------------------------------------------------
+    /** Converts an underscore-separated name into a camelCase name.
+     * For example, {@code uncamel("MY_JDBC_DRIVER")} returns "myJdbcDriver". */
+    public static String toCamelCase(String name) {
+        StringBuilder buf = new StringBuilder();
+        int nextUpper = -1;
+        for (int i = 0; i < name.length(); i++) {
+            char c = name.charAt(i);
+            if (c == '_') {
+                nextUpper = i + 1;
+                continue;
+            }
+            if (nextUpper == i) {
+                c = Character.toUpperCase(c);
+            } else {
+                c = Character.toLowerCase(c);
+            }
+            buf.append(c);
+        }
+        return buf.toString();
+    }
+
+    /** Returns whether the elements of {@code list} are distinct. */
+    public static <E> boolean isDistinct(List<E> list) {
+        final Map<E, Object> set = new HashMap<E, Object>(list.size());
+        for (E e : list) {
+            if (set.put(e, "") != null) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    //~ Inner Classes ----------------------------------------------------------
 
     /**
      * Exception used to interrupt a tree walk of any kind.