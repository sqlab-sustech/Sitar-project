diff --git a/core/sis-referencing/src/main/java/org/apache/sis/referencing/operation/transform/AbstractMathTransform.java b/core/sis-referencing/src/main/java/org/apache/sis/referencing/operation/transform/AbstractMathTransform.java
index 110486b42..eadea8210 100644
--- a/core/sis-referencing/src/main/java/org/apache/sis/referencing/operation/transform/AbstractMathTransform.java
+++ b/core/sis-referencing/src/main/java/org/apache/sis/referencing/operation/transform/AbstractMathTransform.java
@@ -133,7 +133,7 @@ public abstract class AbstractMathTransform extends FormattableObject
     /**
      * Gets the dimension of input points.
      *
-     * @return The dimension of input points.
+     * @return the dimension of input points.
      *
      * @see org.apache.sis.referencing.operation.DefaultOperationMethod#getSourceDimensions()
      */
@@ -143,7 +143,7 @@ public abstract class AbstractMathTransform extends FormattableObject
     /**
      * Gets the dimension of output points.
      *
-     * @return The dimension of output points.
+     * @return the dimension of output points.
      *
      * @see org.apache.sis.referencing.operation.DefaultOperationMethod#getTargetDimensions()
      */
@@ -159,7 +159,7 @@ public abstract class AbstractMathTransform extends FormattableObject
      * {@linkplain Units#METRE metres} or {@linkplain Units#DEGREE decimal degrees}).
      * </div>
      *
-     * @return The parameter descriptors for this math transform, or {@code null} if unspecified.
+     * @return the parameter descriptors for this math transform, or {@code null} if unspecified.
      *
      * @see org.apache.sis.referencing.operation.DefaultOperationMethod#getParameters()
      */
@@ -181,7 +181,7 @@ public abstract class AbstractMathTransform extends FormattableObject
      * to take in account the context of this math transform, i.e. the scales and offsets applied before
      * and after this transform. This information is provided by {@link #getContextualParameters()}.
      *
-     * @return The parameter values for this math transform, or {@code null} if unspecified.
+     * @return the parameter values for this math transform, or {@code null} if unspecified.
      *         Note that those parameters may be normalized (e.g. represent a transformation
      *         of an ellipsoid of semi-major axis length of 1).
      *
@@ -208,7 +208,7 @@ public abstract class AbstractMathTransform extends FormattableObject
      * If a split has been done, then this {@code MathTransform} represents only the non-linear step and Apache SIS
      * needs this method for reconstructing the parameters of the complete transform.
      *
-     * @return The parameters values for the sequence of <cite>normalize</cite> → {@code this} → <cite>denormalize</cite>
+     * @return the parameters values for the sequence of <cite>normalize</cite> → {@code this} → <cite>denormalize</cite>
      *         transforms, or {@code null} if unspecified.
      *         Callers should not modify the returned parameters, since modifications (if allowed)
      *         will generally not be reflected back in this {@code MathTransform}.
@@ -231,9 +231,9 @@ public abstract class AbstractMathTransform extends FormattableObject
     /**
      * Constructs an error message for the {@link MismatchedDimensionException}.
      *
-     * @param argument  The argument name with the wrong number of dimensions.
-     * @param expected  The expected dimension.
-     * @param dimension The wrong dimension.
+     * @param  argument   the argument name with the wrong number of dimensions.
+     * @param  expected   the expected dimension.
+     * @param  dimension  the wrong dimension.
      */
     static MismatchedDimensionException mismatchedDimension(final String argument, final int expected, final int dimension) {
         return new MismatchedDimensionException(Errors.format(Errors.Keys.MismatchedDimension_3, argument, expected, dimension));
@@ -252,8 +252,8 @@ public abstract class AbstractMathTransform extends FormattableObject
      *
      * This method does not update the associated {@link org.opengis.referencing.crs.CoordinateReferenceSystem} value.
      *
-     * @param  ptSrc the coordinate point to be transformed.
-     * @param  ptDst the coordinate point that stores the result of transforming {@code ptSrc}, or {@code null}.
+     * @param  ptSrc  the coordinate point to be transformed.
+     * @param  ptDst  the coordinate point that stores the result of transforming {@code ptSrc}, or {@code null}.
      * @return the coordinate point after transforming {@code ptSrc} and storing the result in {@code ptDst},
      *         or a newly created point if {@code ptDst} was null.
      * @throws MismatchedDimensionException if {@code ptSrc} or {@code ptDst} doesn't have the expected dimension.
@@ -336,13 +336,13 @@ public abstract class AbstractMathTransform extends FormattableObject
      * The source and destination may overlap. Consequently, implementors must read all source
      * ordinate values before to start writing the transformed ordinates in the destination array.
      *
-     * @param srcPts   The array containing the source coordinate (can not be {@code null}).
-     * @param srcOff   The offset to the point to be transformed in the source array.
-     * @param dstPts   The array into which the transformed coordinate is returned. May be the same than {@code srcPts}.
-     *                 May be {@code null} if only the derivative matrix is desired.
-     * @param dstOff   The offset to the location of the transformed point that is stored in the destination array.
-     * @param derivate {@code true} for computing the derivative, or {@code false} if not needed.
-     * @return The matrix of the transform derivative at the given source position,
+     * @param  srcPts    the array containing the source coordinate (can not be {@code null}).
+     * @param  srcOff    the offset to the point to be transformed in the source array.
+     * @param  dstPts    the array into which the transformed coordinate is returned. May be the same than {@code srcPts}.
+     *                   May be {@code null} if only the derivative matrix is desired.
+     * @param  dstOff    the offset to the location of the transformed point that is stored in the destination array.
+     * @param  derivate  {@code true} for computing the derivative, or {@code false} if not needed.
+     * @return the matrix of the transform derivative at the given source position,
      *         or {@code null} if the {@code derivate} argument is {@code false}.
      * @throws TransformException if the point can not be transformed or
      *         if a problem occurred while calculating the derivative.
@@ -369,12 +369,12 @@ public abstract class AbstractMathTransform extends FormattableObject
      *
      * <div class="note"><b>Implementation note:</b> see {@link IterationStrategy} javadoc for a method skeleton.</div>
      *
-     * @param  srcPts The array containing the source point coordinates.
-     * @param  srcOff The offset to the first point to be transformed in the source array.
-     * @param  dstPts The array into which the transformed point coordinates are returned.
-     *                May be the same than {@code srcPts}.
-     * @param  dstOff The offset to the location of the first transformed point that is stored in the destination array.
-     * @param  numPts The number of point objects to be transformed.
+     * @param  srcPts  the array containing the source point coordinates.
+     * @param  srcOff  the offset to the first point to be transformed in the source array.
+     * @param  dstPts  the array into which the transformed point coordinates are returned.
+     *                 May be the same than {@code srcPts}.
+     * @param  dstOff  the offset to the location of the first transformed point that is stored in the destination array.
+     * @param  numPts  the number of point objects to be transformed.
      * @throws TransformException if a point can not be transformed. Some implementations will stop at the first failure,
      *         wile some other implementations will fill the untransformable points with {@linkplain Double#NaN} values,
      *         continue and throw the exception only at end. Implementations that fall in the later case should set the
@@ -406,7 +406,7 @@ public abstract class AbstractMathTransform extends FormattableObject
                     dstOff += (numPts-1) * dstInc; dstInc = -dstInc;
                     break;
                 }
-                default: // Following should alway work even for unknown cases.
+                default:                    // Following should alway work even for unknown cases.
                 case BUFFER_SOURCE: {
                     srcPts = Arrays.copyOfRange(srcPts, srcOff, srcOff + numPts*srcInc);
                     srcOff = 0;
@@ -425,7 +425,7 @@ public abstract class AbstractMathTransform extends FormattableObject
          * and continue with other points, up to some maximal amount of failures.
          */
         TransformException failure = null;
-        int failureCount = 0; // Count ordinates, not coordinates.
+        int failureCount = 0;                           // Count ordinates, not coordinates.
         int blockStart   = 0;
         do {
             try {
@@ -447,12 +447,12 @@ public abstract class AbstractMathTransform extends FormattableObject
                  */
                 Arrays.fill(dstPts, dstOff, dstOff + Math.abs(dstInc), Double.NaN);
                 if (failure == null) {
-                    failure = exception; // Keep only the first failure.
+                    failure = exception;                        // Keep only the first failure.
                     blockStart = srcOff;
                 } else {
                     failure.addSuppressed(exception);
                     if (Math.abs(srcOff - blockStart) > MAXIMUM_BUFFER_SIZE) {
-                        failureCount = 0; // We started a new block of coordinates.
+                        failureCount = 0;                       // We started a new block of coordinates.
                         blockStart = srcOff;
                     }
                 }
@@ -480,12 +480,12 @@ public abstract class AbstractMathTransform extends FormattableObject
      *
      * <div class="note"><b>Implementation note:</b> see {@link IterationStrategy} javadoc for a method skeleton.</div>
      *
-     * @param srcPts The array containing the source point coordinates.
-     * @param srcOff The offset to the first point to be transformed in the source array.
-     * @param dstPts The array into which the transformed point coordinates are returned.
-     *               May be the same than {@code srcPts}.
-     * @param dstOff The offset to the location of the first transformed point that is stored in the destination array.
-     * @param numPts The number of point objects to be transformed.
+     * @param  srcPts  the array containing the source point coordinates.
+     * @param  srcOff  the offset to the first point to be transformed in the source array.
+     * @param  dstPts  the array into which the transformed point coordinates are returned.
+     *                 May be the same than {@code srcPts}.
+     * @param  dstOff  the offset to the location of the first transformed point that is stored in the destination array.
+     * @param  numPts  the number of point objects to be transformed.
      * @throws TransformException if a point can't be transformed. Some implementations will stop at the first failure,
      *         wile some other implementations will fill the un-transformable points with {@link Float#NaN} values,
      *         continue and throw the exception only at end. Implementations that fall in the later case should set
@@ -523,10 +523,10 @@ public abstract class AbstractMathTransform extends FormattableObject
          */
         int srcInc = dimSource * numBufferedPts;
         int dstInc = dimTarget * numBufferedPts;
-        int srcStop = srcInc; // src|dstStop will be used and modified in the do..while loop later.
+        int srcStop = srcInc;                   // src|dstStop will be used and modified in the do..while loop later.
         int dstStop = dstInc;
         if (srcPts == dstPts) {
-            final int numPass = (numPts + numBufferedPts-1) / numBufferedPts; // Round toward higher integer.
+            final int numPass = (numPts + numBufferedPts-1) / numBufferedPts;         // Round toward higher integer.
             switch (IterationStrategy.suggest(srcOff, srcInc, dstOff, dstInc, numPass)) {
                 case ASCENDING: {
                     break;
@@ -562,9 +562,11 @@ public abstract class AbstractMathTransform extends FormattableObject
                 srcStop = numPts * dimSource;
                 dstStop = numPts * dimTarget;
                 if (srcInc < 0) {
-                    // If we were applying IterationStrategy.DESCENDING, then srcOff and dstOff
-                    // may be negative at this point because the last pass may not fill all the
-                    // buffer space. We need to apply the correction below.
+                    /*
+                     * If we were applying IterationStrategy.DESCENDING, then srcOff and dstOff
+                     * may be negative at this point because the last pass may not fill all the
+                     * buffer space. We need to apply the correction below.
+                     */
                     srcOff -= (srcStop + srcInc);
                     dstOff -= (dstStop + dstInc);
                 }
@@ -585,7 +587,7 @@ public abstract class AbstractMathTransform extends FormattableObject
                 if (exception.getLastCompletedTransform() != this) {
                     throw exception;
                 } else if (failure == null) {
-                    failure = exception; // Keep only the first exception.
+                    failure = exception;                        // Keep only the first exception.
                 } else {
                     failure.addSuppressed(exception);
                 }
@@ -606,11 +608,11 @@ public abstract class AbstractMathTransform extends FormattableObject
      * Transforms a list of coordinate point ordinal values. The default implementation delegates
      * to {@link #transform(double[], int, double[], int, int)} using a temporary array of doubles.
      *
-     * @param srcPts The array containing the source point coordinates.
-     * @param srcOff The offset to the first point to be transformed in the source array.
-     * @param dstPts The array into which the transformed point coordinates are returned.
-     * @param dstOff The offset to the location of the first transformed point that is stored in the destination array.
-     * @param numPts The number of point objects to be transformed.
+     * @param  srcPts  the array containing the source point coordinates.
+     * @param  srcOff  the offset to the first point to be transformed in the source array.
+     * @param  dstPts  the array into which the transformed point coordinates are returned.
+     * @param  dstOff  the offset to the location of the first transformed point that is stored in the destination array.
+     * @param  numPts  the number of point objects to be transformed.
      * @throws TransformException if a point can not be transformed. Some implementations will stop at the first failure,
      *         wile some other implementations will fill the untransformable points with {@linkplain Float#NaN} values,
      *         continue and throw the exception only at end. Implementations that fall in the later case should set the
@@ -670,11 +672,11 @@ public abstract class AbstractMathTransform extends FormattableObject
      * to {@link #transform(double[], int, double[], int, int)} using a temporary array of doubles
      * if necessary.
      *
-     * @param srcPts The array containing the source point coordinates.
-     * @param srcOff The offset to the first point to be transformed in the source array.
-     * @param dstPts The array into which the transformed point coordinates are returned.
-     * @param dstOff The offset to the location of the first transformed point that is stored in the destination array.
-     * @param numPts The number of point objects to be transformed.
+     * @param  srcPts  the array containing the source point coordinates.
+     * @param  srcOff  the offset to the first point to be transformed in the source array.
+     * @param  dstPts  the array into which the transformed point coordinates are returned.
+     * @param  dstOff  the offset to the location of the first transformed point that is stored in the destination array.
+     * @param  numPts  the number of point objects to be transformed.
      * @throws TransformException if a point can not be transformed. Some implementations will stop at the first failure,
      *         wile some other implementations will fill the untransformable points with {@linkplain Double#NaN} values,
      *         continue and throw the exception only at end. Implementations that fall in the later case should set the
@@ -751,8 +753,8 @@ public abstract class AbstractMathTransform extends FormattableObject
      *       Otherwise throws {@link TransformException}.</li>
      * </ul>
      *
-     * @param  point The coordinate point where to evaluate the derivative.
-     * @return The derivative at the specified point (never {@code null}).
+     * @param  point  the coordinate point where to evaluate the derivative.
+     * @return the derivative at the specified point (never {@code null}).
      * @throws NullPointerException if the derivative depends on coordinate and {@code point} is {@code null}.
      * @throws MismatchedDimensionException if {@code point} does not have the expected dimension.
      * @throws TransformException if the derivative can not be evaluated at the specified point.
@@ -809,11 +811,11 @@ public abstract class AbstractMathTransform extends FormattableObject
      * by subclasses capable of concatenating some combination of transforms in a special way.
      * Examples are {@link ExponentialTransform1D} and {@link LogarithmicTransform1D}.</p>
      *
-     * @param  other The math transform to apply.
-     * @param  applyOtherFirst {@code true} if the transformation order is {@code other} followed by {@code this},
-     *         or {@code false} if the transformation order is {@code this} followed by {@code other}.
-     * @param  factory The factory which is (indirectly) invoking this method, or {@code null} if none.
-     * @return The combined math transform, or {@code null} if no optimized combined transform is available.
+     * @param  other            the math transform to apply.
+     * @param  applyOtherFirst  {@code true} if the transformation order is {@code other} followed by {@code this}, or
+     *                          {@code false} if the transformation order is {@code this} followed by {@code other}.
+     * @param  factory          the factory which is (indirectly) invoking this method, or {@code null} if none.
+     * @return the combined math transform, or {@code null} if no optimized combined transform is available.
      */
     MathTransform concatenate(MathTransform other, boolean applyOtherFirst, MathTransformFactory factory)
             throws FactoryException
@@ -826,10 +828,10 @@ public abstract class AbstractMathTransform extends FormattableObject
      * when first needed and caches the value for future invocations. Subclasses shall override
      * {@code computeHashCode()} instead than this method.
      *
-     * @return The hash code value. This value may change between different execution of the Apache SIS library.
+     * @return the hash code value. This value may change between different execution of the Apache SIS library.
      */
     @Override
-    public final int hashCode() { // No need to synchronize; ok if invoked twice.
+    public final int hashCode() {               // No need to synchronize; ok if invoked twice.
         int hash = hashCode;
         if (hash == 0) {
             hash = computeHashCode();
@@ -845,7 +847,7 @@ public abstract class AbstractMathTransform extends FormattableObject
     /**
      * Computes a hash value for this transform. This method is invoked by {@link #hashCode()} when first needed.
      *
-     * @return The hash code value. This value may change between different execution of the Apache SIS library.
+     * @return the hash code value. This value may change between different execution of the Apache SIS library.
      */
     protected int computeHashCode() {
         return getClass().hashCode() + getSourceDimensions() + 31 * getTargetDimensions();
@@ -859,7 +861,7 @@ public abstract class AbstractMathTransform extends FormattableObject
      *     return equals(other, ComparisonMode.STRICT);
      * }
      *
-     * @param  object The object to compare with this transform.
+     * @param  object  the object to compare with this transform.
      * @return {@code true} if the given object is a transform of the same class and using the same parameter values.
      */
     @Override
@@ -887,14 +889,16 @@ public abstract class AbstractMathTransform extends FormattableObject
      *       the given comparison mode.</li>
      * </ul>
      *
-     * @param  object The object to compare with this transform.
-     * @param  mode The strictness level of the comparison. Default to {@link ComparisonMode#STRICT STRICT}.
+     * @param  object  the object to compare with this transform.
+     * @param  mode    the strictness level of the comparison. Default to {@link ComparisonMode#STRICT STRICT}.
      * @return {@code true} if the given object is considered equals to this math transform.
      */
     @Override
     public boolean equals(final Object object, final ComparisonMode mode) {
-        // Do not check 'object==this' here, since this
-        // optimization is usually done in subclasses.
+        /*
+         * Do not check 'object==this' here, since this
+         * optimization is usually done in subclasses.
+         */
         if (object != null && getClass() == object.getClass()) {
             final AbstractMathTransform that = (AbstractMathTransform) object;
             /*
@@ -935,10 +939,10 @@ public abstract class AbstractMathTransform extends FormattableObject
      * <p>This method is invoked only by {@link ConcatenatedTransform#getPseudoSteps()} in order to
      * get the {@link ParameterValueGroup} of a map projection, or to format a {@code PROJCS} WKT.</p>
      *
-     * @param  transforms The full chain of concatenated transforms.
-     * @param  index      The index of this transform in the {@code transforms} chain.
-     * @param  inverse    Always {@code false}, except if we are formatting the inverse transform.
-     * @return Index of this transform in the {@code transforms} chain after processing.
+     * @param  transforms  the full chain of concatenated transforms.
+     * @param  index       the index of this transform in the {@code transforms} chain.
+     * @param  inverse     always {@code false}, except if we are formatting the inverse transform.
+     * @return index of this transform in the {@code transforms} chain after processing.
      *
      * @see ConcatenatedTransform#getPseudoSteps()
      */
@@ -959,8 +963,8 @@ public abstract class AbstractMathTransform extends FormattableObject
      * then this method silently uses the WKT 1 convention without raising an error
      * (unless this {@code MathTransform} can not be formatted as valid WKT 1 neither).</div>
      *
-     * @param  formatter The formatter to use.
-     * @return The WKT element name, which is {@code "Param_MT"} in the default implementation.
+     * @param  formatter  the formatter to use.
+     * @return the WKT element name, which is {@code "Param_MT"} in the default implementation.
      */
     @Override
     protected String formatTo(final Formatter formatter) {
@@ -1051,7 +1055,7 @@ public abstract class AbstractMathTransform extends FormattableObject
         /**
          * Returns the inverse of this math transform, which is the enclosing math transform.
          *
-         * @return The enclosing math transform.
+         * @return the enclosing math transform.
          */
         @Override
         public MathTransform inverse() {
@@ -1089,8 +1093,7 @@ public abstract class AbstractMathTransform extends FormattableObject
         @Override
         public boolean equals(final Object object, final ComparisonMode mode) {
             if (object == this) {
-                // Slight optimization
-                return true;
+                return true;                                            // Slight optimization
             }
             if (object != null && object.getClass() == getClass()) {
                 return AbstractMathTransform.this.equals(((Inverse) object).inverse(), mode);
@@ -1122,8 +1125,8 @@ public abstract class AbstractMathTransform extends FormattableObject
          * <div class="note"><b>Compatibility note:</b>
          * {@code Param_MT} and {@code Inverse_MT} are defined in the WKT 1 specification only.</div>
          *
-         * @param  formatter The formatter to use.
-         * @return The WKT element name, which is {@code "Param_MT"} or
+         * @param  formatter  the formatter to use.
+         * @return the WKT element name, which is {@code "Param_MT"} or
          *         {@code "Inverse_MT"} in the default implementation.
          */
         @Override