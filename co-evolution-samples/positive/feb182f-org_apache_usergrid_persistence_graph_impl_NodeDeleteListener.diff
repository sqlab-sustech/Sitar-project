diff --git a/stack/corepersistence/graph/src/main/java/org/apache/usergrid/persistence/graph/impl/NodeDeleteListener.java b/stack/corepersistence/graph/src/main/java/org/apache/usergrid/persistence/graph/impl/NodeDeleteListener.java
index 7ddb5fbeb..7c67f0466 100644
--- a/stack/corepersistence/graph/src/main/java/org/apache/usergrid/persistence/graph/impl/NodeDeleteListener.java
+++ b/stack/corepersistence/graph/src/main/java/org/apache/usergrid/persistence/graph/impl/NodeDeleteListener.java
@@ -104,16 +104,16 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
     /**
      * Removes this node from the graph.
      *
-     * @param edgeEvent The edge event that was fired.
+     * @param nodeDeleteEvent The edge event that was fired.
      *
      * @return An observable that emits the total number of edges that have been removed with this node both as the
      *         target and source
      */
     @Override
-    public Observable<Integer> receive( final NodeDeleteEvent edgeEvent ) {
+    public Observable<Integer> receive( final NodeDeleteEvent nodeDeleteEvent ) {
 
-        final Id node = edgeEvent.getData();
-        final ApplicationScope scope = edgeEvent.getApplicationScope();
+        final Id node = nodeDeleteEvent.getData();
+        final ApplicationScope scope = nodeDeleteEvent.getApplicationScope();
 
 
         return Observable.from( node )
@@ -123,7 +123,7 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
                     @Override
                     public Observable<Integer> call( final Id node ) {
 
-                        final Optional<UUID> maxVersion = nodeSerialization.getMaxVersion( scope, node );
+                        final Optional<Long> maxVersion = nodeSerialization.getMaxVersion( scope, node );
 
                         LOG.debug( "Node with id {} has max version of {}", node, maxVersion.orNull() );
 
@@ -132,26 +132,26 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
                             return Observable.empty();
                         }
 
-                        maxVersion.get();
+
 
                         //do all the delete, then when done, delete the node
-                        return doDeletes( node, scope, maxVersion.get() ).count()
+                        return doDeletes( node, scope, maxVersion.get(), nodeDeleteEvent.getTimestamp() ).count()
                                 //if nothing is ever emitted, emit 0 so that we know no operations took place.
                                 // Finally remove
                                 // the
                                 // target node in the mark
                                .doOnCompleted( new Action0() {
-                                    @Override
-                                    public void call() {
-                                        try {
-                                            nodeSerialization.delete( scope, node, maxVersion.get() ).execute();
-                                        }
-                                        catch ( ConnectionException e ) {
-                                            throw new RuntimeException( "Unable to delete marked graph node " + node,
-                                                    e );
-                                        }
-                                    }
-                                } );
+                                   @Override
+                                   public void call() {
+                                       try {
+                                           nodeSerialization.delete( scope, node, maxVersion.get() ).execute();
+                                       }
+                                       catch ( ConnectionException e ) {
+                                           throw new RuntimeException( "Unable to delete marked graph node " + node,
+                                                   e );
+                                       }
+                                   }
+                               } );
                     }
                 } ).defaultIfEmpty( 0 );
     }
@@ -160,7 +160,7 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
     /**
      * Do the deletes
      */
-    private Observable<MarkedEdge> doDeletes( final Id node, final ApplicationScope scope, final UUID version ) {
+    private Observable<MarkedEdge> doDeletes( final Id node, final ApplicationScope scope, final long maxVersion, final UUID eventTimestamp ) {
         /**
          * Note that while we're processing, returned edges could be moved from the commit log to storage.  As a result,
          * we need to issue a delete with the same version as the node delete on both commit log and storage for
@@ -176,7 +176,7 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
                             @Override
                             public Observable<MarkedEdge> call( final String edgeType ) {
                                 return mergedEdgeReader.getEdgesToTarget( scope,
-                                        new SimpleSearchByEdgeType( node, edgeType, version, null ) );
+                                        new SimpleSearchByEdgeType( node, edgeType, maxVersion, null ) );
                             }
                         } );
 
@@ -188,7 +188,7 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
                             @Override
                             public Observable<MarkedEdge> call( final String edgeType ) {
                                 return mergedEdgeReader.getEdgesFromSource( scope,
-                                        new SimpleSearchByEdgeType( node, edgeType, version, null ) );
+                                        new SimpleSearchByEdgeType( node, edgeType, maxVersion, null ) );
                             }
                         } );
 
@@ -213,8 +213,8 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
 
                             //we use the version specified on the delete purposefully.  If these edges are re-written
                             //at a greater time we want them to exit
-                            batch.mergeShallow( commitLogSerialization.deleteEdge( scope, edge, version ) );
-                            batch.mergeShallow( storageSerialization.deleteEdge( scope, edge, version ) );
+                            batch.mergeShallow( commitLogSerialization.deleteEdge( scope, edge, eventTimestamp ) );
+                            batch.mergeShallow( storageSerialization.deleteEdge( scope, edge, eventTimestamp ) );
 
                             sourceNodes.add( new TargetPair( edge.getSourceNode(), edge.getType() ) );
                             targetNodes.add( new TargetPair( edge.getTargetNode(), edge.getType() ) );
@@ -243,7 +243,7 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
                                     @Override
                                     public Observable<Integer> call( final TargetPair targetPair ) {
                                         return edgeMetaRepair
-                                                .repairSources( scope, targetPair.id, targetPair.edgeType, version );
+                                                .repairSources( scope, targetPair.id, targetPair.edgeType, maxVersion );
                                     }
                                 } ).last();
 
@@ -255,7 +255,7 @@ public class NodeDeleteListener implements MessageListener<NodeDeleteEvent, Inte
                                     @Override
                                     public Observable<Integer> call( final TargetPair targetPair ) {
                                         return edgeMetaRepair
-                                                .repairTargets( scope, targetPair.id, targetPair.edgeType, version );
+                                                .repairTargets( scope, targetPair.id, targetPair.edgeType, maxVersion );
                                     }
                                 } ).last();
 