diff --git a/storm-core/src/jvm/backtype/storm/grouping/PartialKeyGrouping.java b/storm-core/src/jvm/backtype/storm/grouping/PartialKeyGrouping.java
index f36f4c6da..d1f534b3f 100644
--- a/storm-core/src/jvm/backtype/storm/grouping/PartialKeyGrouping.java
+++ b/storm-core/src/jvm/backtype/storm/grouping/PartialKeyGrouping.java
@@ -18,12 +18,14 @@
 package backtype.storm.grouping;
 
 import java.io.Serializable;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 
 import backtype.storm.generated.GlobalStreamId;
 import backtype.storm.grouping.CustomStreamGrouping;
 import backtype.storm.task.WorkerTopologyContext;
+import backtype.storm.tuple.Fields;
 
 import com.google.common.hash.HashFunction;
 import com.google.common.hash.Hashing;
@@ -34,20 +36,43 @@ public class PartialKeyGrouping implements CustomStreamGrouping, Serializable {
     private long[] targetTaskStats;
     private HashFunction h1 = Hashing.murmur3_128(13);
     private HashFunction h2 = Hashing.murmur3_128(17);
+    private Fields fields = null;
+    private Fields outFields = null;
+
+    public PartialKeyGrouping() {
+        //Empty
+    }
+
+    public PartialKeyGrouping(Fields fields) {
+        this.fields = fields;
+    }
 
     @Override
     public void prepare(WorkerTopologyContext context, GlobalStreamId stream, List<Integer> targetTasks) {
         this.targetTasks = targetTasks;
         targetTaskStats = new long[this.targetTasks.size()];
+        if (this.fields != null) {
+            this.outFields = context.getComponentOutputFields(stream);
+        }
     }
 
     @Override
     public List<Integer> chooseTasks(int taskId, List<Object> values) {
         List<Integer> boltIds = new ArrayList<Integer>(1);
         if (values.size() > 0) {
-            String str = values.get(0).toString(); // assume key is the first field
-            int firstChoice = (int) Math.abs(h1.hashBytes(str.getBytes()).asLong()) % this.targetTasks.size();
-            int secondChoice = (int) Math.abs(h2.hashBytes(str.getBytes()).asLong()) % this.targetTasks.size();
+            byte[] raw = null;
+            if (fields != null) {
+                List<Object> selectedFields = outFields.select(fields, values);
+                ByteBuffer out = ByteBuffer.allocate(selectedFields.size() * 4);
+                for (Object o: selectedFields) {
+                    out.putInt(o.hashCode());
+                }
+                raw = out.array();
+            } else {
+                raw = values.get(0).toString().getBytes(); // assume key is the first field
+            }
+            int firstChoice = (int) (Math.abs(h1.hashBytes(raw).asLong()) % this.targetTasks.size());
+            int secondChoice = (int) (Math.abs(h2.hashBytes(raw).asLong()) % this.targetTasks.size());
             int selected = targetTaskStats[firstChoice] > targetTaskStats[secondChoice] ? secondChoice : firstChoice;
             boltIds.add(targetTasks.get(selected));
             targetTaskStats[selected]++;