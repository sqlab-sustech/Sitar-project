diff --git a/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java b/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java
index 92d861a..f8146a5 100644
--- a/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java
+++ b/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java
@@ -98,6 +98,12 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
         return p.subtract(this);
     }
 
+    /** {@inheritDoc} */
+    @Override
+    public Point3D lerp(Point3D p, double t) {
+        return vectorCombination(1.0 - t, this, t, p);
+    }
+
     /** {@inheritDoc} */
     @Override
     public Point3D add(Vector3D v) {
@@ -209,6 +215,18 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
         return SimpleTupleFormat.getDefault().parse(str, FACTORY);
     }
 
+    /** Linearly interpolates between the two given points. This methods simply
+     * calls {@code a.lerp(b, t)}.
+     * @param a first point
+     * @param b second point
+     * @param t interpolation parameter
+     * @return the interpolated point
+     * @see #lerp(Point3D, double)
+     */
+    public static Point3D lerp(Point3D a, Point3D b, double t) {
+        return a.lerp(b, t);
+    }
+
     /** Returns a point with coordinates calculated by multiplying each input coordinate
      * with its corresponding factor and adding the results.
      *