diff --git a/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java b/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java
index 46de33d..7c2b3f7 100644
--- a/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java
+++ b/commons-geometry-euclidean/src/main/java/org/apache/commons/geometry/euclidean/threed/Point3D.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.geometry.euclidean.threed;
 
+import org.apache.commons.geometry.core.internal.DoubleFunction3N;
+import org.apache.commons.geometry.core.internal.SimpleTupleFormat;
 import org.apache.commons.geometry.euclidean.EuclideanPoint;
 import org.apache.commons.numbers.arrays.LinearCombination;
 
@@ -42,7 +44,17 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
         new Point3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 1313493323784566947L;
+    private static final long serialVersionUID = 20180710L;
+
+    /** Factory for delegating instance creation. */
+    private static DoubleFunction3N<Point3D> FACTORY = new DoubleFunction3N<Point3D>() {
+
+        /** {@inheritDoc} */
+        @Override
+        public Point3D apply(double n1, double n2, double n3) {
+            return new Point3D(n1, n2, n3);
+        }
+    };
 
     /** Simple constructor.
      * Build a point from its coordinates
@@ -50,7 +62,7 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
      * @param y ordinate
      * @param z height
      */
-    public Point3D(double x, double y, double z) {
+    private Point3D(double x, double y, double z) {
         super(x, y, z);
     }
 
@@ -69,7 +81,7 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
     /** {@inheritDoc} */
     @Override
     public Vector3D subtract(Point3D p) {
-        return new Vector3D(
+        return Vector3D.of(
                     getX() - p.getX(),
                     getY() - p.getY(),
                     getZ() - p.getZ()
@@ -142,12 +154,6 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
         return false;
     }
 
-    /** {@inheritDoc} */
-    @Override
-    public String toString() {
-        return "(" + getX() + "; " + getY() + "; " + getZ() + ")";
-    }
-
     /** Returns a point with the given coordinate values
      * @param x abscissa (first coordinate value)
      * @param y ordinate (second coordinate value)
@@ -178,6 +184,16 @@ public final class Point3D extends Cartesian3D implements EuclideanPoint<Point3D
         return new Point3D(p[0], p[1], p[2]);
     }
 
+    /** Parses the given string and returns a new point instance. The expected string
+     * format is the same as that returned by {@link #toString()}.
+     * @param str the string to parse
+     * @return point instance represented by the string
+     * @throws IllegalArgumentException if the given string has an invalid format
+     */
+    public static Point3D parse(String str) throws IllegalArgumentException {
+        return SimpleTupleFormat.getDefault().parse(str, FACTORY);
+    }
+
     /** Returns a point with coordinates calculated by multiplying each input coordinate
      * with its corresponding factor and adding the results.
      *