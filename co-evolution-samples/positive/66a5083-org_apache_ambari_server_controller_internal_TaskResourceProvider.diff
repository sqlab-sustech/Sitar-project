diff --git a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java
index 39419ec1df..c81742fc68 100644
--- a/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java
+++ b/ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java
@@ -18,7 +18,6 @@
 package org.apache.ambari.server.controller.internal;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
@@ -47,6 +46,7 @@ import org.codehaus.jackson.map.ObjectMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.collect.ImmutableMap;
 import com.google.inject.Inject;
 
 /**
@@ -81,9 +81,6 @@ public class TaskResourceProvider extends AbstractControllerResourceProvider {
   public static final String TASK_CUST_CMD_NAME_PROPERTY_ID  = PropertyHelper.getPropertyId("Tasks", "custom_command_name");
   public static final String TASK_COMMAND_OPS_DISPLAY_NAME  = PropertyHelper.getPropertyId("Tasks", "ops_display_name");
 
-  private static Set<String> pkPropertyIds =
-    new HashSet<>(Arrays.asList(new String[]{
-      TASK_ID_PROPERTY_ID}));
 
   /**
    * The property ids for a task resource.
@@ -115,6 +112,18 @@ public class TaskResourceProvider extends AbstractControllerResourceProvider {
     PROPERTY_IDS.add(TASK_COMMAND_OPS_DISPLAY_NAME);
   }
 
+  /**
+   * The key property ids for a task resource.
+   */
+  private static Map<Resource.Type, String> keyPropertyIds = ImmutableMap.<Resource.Type, String>builder()
+      .put(Resource.Type.Cluster, TASK_CLUSTER_NAME_PROPERTY_ID)
+      .put(Resource.Type.Request, TASK_REQUEST_ID_PROPERTY_ID)
+      .put(Resource.Type.Upgrade, TASK_REQUEST_ID_PROPERTY_ID)
+      .put(Resource.Type.Stage, TASK_STAGE_ID_PROPERTY_ID)
+      .put(Resource.Type.UpgradeItem, TASK_STAGE_ID_PROPERTY_ID)
+      .put(Resource.Type.Task, TASK_ID_PROPERTY_ID)
+      .build();
+
   /**
    * Used for querying tasks.
    */
@@ -140,14 +149,10 @@ public class TaskResourceProvider extends AbstractControllerResourceProvider {
   /**
    * Create a  new resource provider for the given management controller.
    *
-   * @param propertyIds           the property ids
-   * @param keyPropertyIds        the key property ids
    * @param managementController  the management controller
    */
-  TaskResourceProvider(Set<String> propertyIds,
-                       Map<Resource.Type, String> keyPropertyIds,
-                       AmbariManagementController managementController) {
-    super(propertyIds, keyPropertyIds, managementController);
+  TaskResourceProvider(AmbariManagementController managementController) {
+    super(Resource.Type.Task, PROPERTY_IDS, keyPropertyIds, managementController);
   }
 
   // ----- ResourceProvider ------------------------------------------------
@@ -284,7 +289,7 @@ public class TaskResourceProvider extends AbstractControllerResourceProvider {
 
   @Override
   protected Set<String> getPKPropertyIds() {
-    return pkPropertyIds;
+    return new HashSet<>(keyPropertyIds.values());
   }
 
   /**