diff --git a/core/sis-referencing/src/main/java/org/apache/sis/io/wkt/Formatter.java b/core/sis-referencing/src/main/java/org/apache/sis/io/wkt/Formatter.java
index 074bdde2a..d4aefd3f5 100644
--- a/core/sis-referencing/src/main/java/org/apache/sis/io/wkt/Formatter.java
+++ b/core/sis-referencing/src/main/java/org/apache/sis/io/wkt/Formatter.java
@@ -127,8 +127,8 @@ public class Formatter {
     /**
      * The preferred authority for objects or parameter names.
      *
-     * @see WKTFormat#getAuthority(Citation)
-     * @see WKTFormat#setAuthority(Citation)
+     * @see WKTFormat#getNameAuthority()
+     * @see WKTFormat#setNameAuthority(Citation)
      */
     private Citation authority;
 
@@ -191,7 +191,7 @@ public class Formatter {
     private boolean requestNewLine;
 
     /**
-     * {@code true} if the last formatted element was invalid WKT and shall be highlighted with syntatic coloration.
+     * {@code true} if the last formatted element was invalid WKT and shall be highlighted with syntactic coloration.
      * This field has no effect if {@link #colors} is null. This field is reset to {@code false} after the invalid
      * part has been processed by {@link #append(FormattableObject)}, in order to highlight only the first erroneous
      * element without clearing the {@link #invalidElement} value.
@@ -218,7 +218,7 @@ public class Formatter {
      * Creates a new formatter instance with the default symbols, no syntax coloring and the default indentation.
      */
     public Formatter() {
-        this(Convention.OGC, Symbols.DEFAULT, null, WKTFormat.DEFAULT_INDENTATION);
+        this(Convention.DEFAULT, Symbols.DEFAULT, null, WKTFormat.DEFAULT_INDENTATION);
     }
 
     /**
@@ -250,7 +250,7 @@ public class Formatter {
      * This constructor helps to share some objects with {@link Parser}.
      */
     Formatter(final Symbols symbols, final NumberFormat numberFormat) {
-        this.convention   = Convention.OGC;
+        this.convention   = Convention.DEFAULT;
         this.symbols      = symbols;
         this.indentation  = WKTFormat.DEFAULT_INDENTATION;
         this.numberFormat = numberFormat; // No clone needed.
@@ -259,8 +259,7 @@ public class Formatter {
     }
 
     /**
-     * Returns the convention to use for formatting the WKT. The default convention is {@link Convention#OGC OGC}.
-     * A different convention will usually result in different parameter names, but may also change the WKT syntax.
+     * Returns the convention to use for formatting the WKT. The default is {@link Convention#WKT2}.
      *
      * @return The convention (never {@code null}).
      *
@@ -278,30 +277,26 @@ public class Formatter {
      * @param authority  The authority, or {@code null} for inferring it from the convention.
      */
     final void setConvention(Convention convention, final Citation authority) {
-        if (convention == null) {
-            convention = Convention.forCitation(authority, Convention.OGC);
-        }
         this.convention = convention;
-        this.authority  = (authority != null) ? authority : convention.authority; // NOT convention.getAuthority()
+        this.authority  = (authority != null) ? authority : convention.getNameAuthority();
     }
 
     /**
      * Returns the preferred name for the specified object.
-     * If the specified object contains a name from the preferred authority
-     * (usually {@linkplain org.apache.sis.metadata.iso.citation.Citations#OGC Open Geospatial}),
-     * then this name is returned. Otherwise, the first name found is returned.
+     * If the specified object contains a name from the preferred authority, then this name is returned.
+     * Otherwise, the first name found is returned.
      *
-     * <p>The preferred authority can be set by the {@link WKTFormat#setAuthority(Citation)} method.
+     * <p>The preferred authority can be set by the {@link WKTFormat#setNameAuthority(Citation)} method.
      * This is not necessarily the authority of the given {@linkplain IdentifiedObject#getName() object name}.</p>
      *
      * {@example The EPSG name of the <code>EPSG:6326</code> datum is "<cite>World Geodetic System 1984</cite>".
-     *           However if the preferred authority is OGC (which is the case by default), then this method usually
-     *           returns "<cite>WGS84</cite>" (the exact string to be returned depends on the object aliases).}
+     *           However if the preferred authority is OGC, then this method usually returns "<cite>WGS84</cite>"
+     *           (the exact string to be returned depends on the object aliases).}
      *
      * @param  object The object to look for a preferred name.
      * @return The preferred name, or {@code null} if the given object has no name.
      *
-     * @see WKTFormat#getAuthority()
+     * @see WKTFormat#getNameAuthority()
      * @see IdentifiedObjects#getName(IdentifiedObject, Citation)
      */
     public String getName(final IdentifiedObject object) {
@@ -314,9 +309,8 @@ public class Formatter {
 
     /**
      * Returns the preferred identifier for the specified object.
-     * If the specified object contains an identifier from the preferred authority
-     * (usually {@linkplain org.apache.sis.metadata.iso.citation.Citations#OGC Open Geospatial}),
-     * then this identifier is returned. Otherwise, the first identifier is returned.
+     * If the specified object contains an identifier from the preferred authority, then this identifier is returned.
+     * Otherwise, the first identifier is returned.
      * If the specified object contains no identifier, then this method returns {@code null}.
      *
      * @param  info The object to look for a preferred identifier, or {@code null} if none.
@@ -548,8 +542,8 @@ public class Formatter {
         final int numCol = matrix.getNumCol();
         final int openingBracket  = symbols.getOpeningBracket(0);
         final int closingBracket  = symbols.getClosingBracket(0);
-        final int openQuote       = symbols.getOpenQuote();
-        final int closeQuote      = symbols.getCloseQuote();
+        final int openQuote       = symbols.getOpeningQuote(0);
+        final int closeQuote      = symbols.getClosingQuote(0);
         final String separator    = symbols.getSeparator();
         final StringBuffer buffer = this.buffer;
         boolean columns = false;
@@ -601,7 +595,7 @@ public class Formatter {
                 if (contextUnit!=null && unit.isCompatible(contextUnit)) {
                     unit = contextUnit;
                 } else {
-                    contextUnit = convention.forcedAngularUnit;
+                    contextUnit = convention.getForcedUnit(Angle.class);
                     if (contextUnit == null) {
                         contextUnit = angularUnit;
                     }
@@ -710,7 +704,8 @@ public class Formatter {
      * Appends the given string as a quoted text.
      */
     private void quote(final String text) {
-        buffer.appendCodePoint(symbols.getOpenQuote()).append(text).appendCodePoint(symbols.getCloseQuote());
+        buffer.appendCodePoint(symbols.getOpeningQuote(0)).append(text)
+              .appendCodePoint(symbols.getClosingQuote(0));
     }
 
     /**
@@ -775,15 +770,15 @@ public class Formatter {
             appendSeparator(requestNewLine);
             buffer.append("UNIT").appendCodePoint(symbols.getOpeningBracket(0));
             setColor(ElementKind.UNIT);
-            buffer.appendCodePoint(symbols.getOpenQuote());
+            buffer.appendCodePoint(symbols.getOpeningQuote(0));
             if (NonSI.DEGREE_ANGLE.equals(unit)) {
                 buffer.append("degree");
             } else if (SI.METRE.equals(unit)) {
-                buffer.append(convention.unitUS ? "meter" : "metre");
+                buffer.append(convention.commonUnits ? "meter" : "metre");
             } else {
                 unitFormat.format(unit, buffer, dummy);
             }
-            buffer.appendCodePoint(symbols.getCloseQuote());
+            buffer.appendCodePoint(symbols.getClosingQuote(0));
             resetColor();
             append(Units.toStandardUnit(unit));
             buffer.appendCodePoint(symbols.getClosingBracket(0));
@@ -829,10 +824,9 @@ public class Formatter {
     }
 
     /**
-     * Returns {@code true} if the WKT written by this formatter is not strictly compliant to the
-     * <a href="http://www.geoapi.org/3.0/javadoc/org/opengis/referencing/doc-files/WKT.html">WKT
-     * specification</a>. This method returns {@code true} if {@link #setInvalidWKT(IdentifiedObject)}
-     * has been invoked at least once. The action to take regarding invalid WKT is caller-dependent.
+     * Returns {@code true} if the WKT written by this formatter is not strictly compliant to the WKT specification.
+     * This method returns {@code true} if {@link #setInvalidWKT(IdentifiedObject)} has been invoked at least once.
+     * The action to take regarding invalid WKT is caller-dependent.
      * For example {@link FormattableObject#toString()} will accepts loose WKT formatting and ignore
      * this flag, while {@link FormattableObject#toWKT()} requires strict WKT formatting and will
      * thrown an exception if this flag is set.