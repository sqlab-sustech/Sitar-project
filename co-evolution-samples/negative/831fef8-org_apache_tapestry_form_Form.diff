diff --git a/framework/src/java/org/apache/tapestry/form/Form.java b/framework/src/java/org/apache/tapestry/form/Form.java
index 1a31535ca..6c8f31ad4 100644
--- a/framework/src/java/org/apache/tapestry/form/Form.java
+++ b/framework/src/java/org/apache/tapestry/form/Form.java
@@ -1,4 +1,4 @@
-// Copyright 2004, 2005 The Apache Software Foundation
+// Copyright 2004, 2005, 2006 The Apache Software Foundation
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -14,7 +14,6 @@
 
 package org.apache.tapestry.form;
 
-import org.apache.hivemind.ApplicationRuntimeException;
 import org.apache.hivemind.Location;
 import org.apache.tapestry.AbstractComponent;
 import org.apache.tapestry.IActionListener;
@@ -36,38 +35,47 @@ import org.apache.tapestry.valid.IValidationDelegate;
 import org.apache.tapestry.web.WebResponse;
 
 /**
- * Component which contains form element components. Forms use the action or direct services to
- * handle the form submission. A Form will wrap other components and static HTML, including form
- * components such as {@link TextArea}, {@link TextField}, {@link Checkbox}, etc. [ <a
+ * Component which contains form element components. Forms use the action or
+ * direct services to handle the form submission. A Form will wrap other
+ * components and static HTML, including form components such as
+ * {@link TextArea}, {@link TextField}, {@link Checkbox}, etc. [ <a
  * href="../../../../../ComponentReference/Form.html">Component Reference </a>]
  * <p>
- * When a form is submitted, it continues through the rewind cycle until <em>after</em> all of its
- * wrapped elements have renderred. As the form component render (in the rewind cycle), they will be
- * updating properties of the containing page and notifying thier listeners. Again: each form
- * component is responsible not only for rendering HTML (to present the form), but for handling it's
- * share of the form submission.
+ * When a form is submitted, it continues through the rewind cycle until
+ * <em>after</em> all of its wrapped elements have renderred. As the form
+ * component render (in the rewind cycle), they will be updating properties of
+ * the containing page and notifying thier listeners. Again: each form component
+ * is responsible not only for rendering HTML (to present the form), but for
+ * handling it's share of the form submission.
  * <p>
  * Only after all that is done will the Form notify its listener.
  * <p>
- * Starting in release 1.0.2, a Form can use either the direct service or the action service. The
- * default is the direct service, even though in earlier releases, only the action service was
- * available.
+ * Starting in release 1.0.2, a Form can use either the direct service or the
+ * action service. The default is the direct service, even though in earlier
+ * releases, only the action service was available.
  * <p>
- * Release 4.0 adds two new listeners, {@link #getCancel()} and {@link #getRefresh()} and
- * corresponding client-side behavior to force a form to refresh (update, bypassing input field
- * validation) or cancel (update immediately).
+ * Release 4.0 adds two new listeners, {@link #getCancel()} and
+ * {@link #getRefresh()} and corresponding client-side behavior to force a form
+ * to refresh (update, bypassing input field validation) or cancel (update
+ * immediately).
  * 
  * @author Howard Lewis Ship, David Solis
  */
 
 public abstract class Form extends AbstractComponent implements IForm, IDirect
 {
+
     private String _name;
 
     private FormSupport _formSupport;
 
+    /**
+     * Inner class to render informal parameters, passed to the
+     * {@link FormSupport}.
+     */
     private class RenderInformalParameters implements IRender
     {
+
         public void render(IMarkupWriter writer, IRequestCycle cycle)
         {
             renderInformalParameters(writer, cycle);
@@ -77,20 +85,22 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     private IRender _renderInformalParameters;
 
     /**
-     * Returns the currently active {@link IForm}, or null if no form is active. This is a
-     * convienience method, the result will be null, or an instance of {@link IForm}, but not
-     * necessarily a <code>Form</code>.
+     * Returns the currently active {@link IForm}, or null if no form is
+     * active. This is a convienience method, the result will be null, or an
+     * instance of {@link IForm}, but not necessarily a <code>Form</code>.
      * 
-     * @deprecated Use {@link TapestryUtils#getForm(IRequestCycle, IComponent)} instead.
+     * @deprecated Use {@link TapestryUtils#getForm(IRequestCycle, IComponent)}
+     *             instead.
      */
 
     public static IForm get(IRequestCycle cycle)
     {
-        return (IForm) cycle.getAttribute(ATTRIBUTE_NAME);
+        return (IForm)cycle.getAttribute(ATTRIBUTE_NAME);
     }
 
     /**
-     * Indicates to any wrapped form components that they should respond to the form submission.
+     * Indicates to any wrapped form components that they should respond to the
+     * form submission.
      * 
      * @throws ApplicationRuntimeException
      *             if not rendering.
@@ -98,8 +108,7 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
 
     public boolean isRewinding()
     {
-        if (!isRendering())
-            throw Tapestry.createRenderOnlyPropertyException(this, "rewinding");
+        if (!isRendering()) throw Tapestry.createRenderOnlyPropertyException(this, "rewinding");
 
         return _formSupport.isRewinding();
     }
@@ -123,7 +132,8 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     /**
      * Returns true if this Form is configured to use the direct service.
      * <p>
-     * This is derived from the direct parameter, and defaults to true if not bound.
+     * This is derived from the direct parameter, and defaults to true if not
+     * bound.
      * 
      * @since 1.0.2
      */
@@ -131,8 +141,8 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     public abstract boolean isDirect();
 
     /**
-     * Returns true if the stateful parameter is bound to a true value. If stateful is not bound,
-     * also returns the default, true.
+     * Returns true if the stateful parameter is bound to a true value. If
+     * stateful is not bound, also returns the default, true.
      * 
      * @since 1.0.1
      */
@@ -143,12 +153,12 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     }
 
     /**
-     * Constructs a unique identifier (within the Form). The identifier consists of the component's
-     * id, with an index number added to ensure uniqueness.
+     * Constructs a unique identifier (within the Form). The identifier consists
+     * of the component's id, with an index number added to ensure uniqueness.
      * <p>
      * Simply invokes
-     * {@link #getElementId(org.apache.tapestry.form.IFormComponent, java.lang.String)}with the
-     * component's id.
+     * {@link #getElementId(org.apache.tapestry.form.IFormComponent, java.lang.String)}with
+     * the component's id.
      * 
      * @since 1.0.2
      */
@@ -159,11 +169,11 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     }
 
     /**
-     * Constructs a unique identifier from the base id. If possible, the id is used as-is.
-     * Otherwise, a unique identifier is appended to the id.
+     * Constructs a unique identifier from the base id. If possible, the id is
+     * used as-is. Otherwise, a unique identifier is appended to the id.
      * <p>
-     * This method is provided simply so that some components ({@link ImageSubmit}) have more
-     * specific control over their names.
+     * This method is provided simply so that some components ({@link ImageSubmit})
+     * have more specific control over their names.
      * 
      * @since 1.0.3
      */
@@ -174,15 +184,16 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     }
 
     /**
-     * Returns the name generated for the form. This is used to faciliate components that write
-     * JavaScript and need to access the form or its contents.
+     * Returns the name generated for the form. This is used to faciliate
+     * components that write JavaScript and need to access the form or its
+     * contents.
      * <p>
-     * This value is generated when the form renders, and is not cleared. If the Form is inside a
-     * {@link org.apache.tapestry.components.Foreach}, this will be the most recently generated
-     * name for the Form.
+     * This value is generated when the form renders, and is not cleared. If the
+     * Form is inside a {@link org.apache.tapestry.components.Foreach}, this
+     * will be the most recently generated name for the Form.
      * <p>
-     * This property is exposed so that sophisticated applications can write JavaScript handlers for
-     * the form and components within the form.
+     * This property is exposed so that sophisticated applications can write
+     * JavaScript handlers for the form and components within the form.
      * 
      * @see AbstractFormComponent#getName()
      */
@@ -209,8 +220,7 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
 
         IValidationDelegate delegate = getDelegate();
 
-        if (delegate != null)
-            delegate.setFormComponent(null);
+        if (delegate != null) delegate.setFormComponent(null);
 
         super.cleanupAfterRender(cycle);
     }
@@ -242,8 +252,7 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
 
         _name = baseName + getResponse().getNamespace();
 
-        if (_renderInformalParameters == null)
-            _renderInformalParameters = new RenderInformalParameters();
+        if (_renderInformalParameters == null) _renderInformalParameters = new RenderInformalParameters();
 
         ILink link = getLink(cycle, actionId);
 
@@ -258,22 +267,20 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
             result = getCancel();
         else if (mode.equals(FormConstants.SUBMIT_REFRESH))
             result = getRefresh();
-        else if (!getDelegate().getHasErrors())
-            result = getSuccess();
+        else if (!getDelegate().getHasErrors()) result = getSuccess();
 
         // If not success, cancel or refresh, or the corresponding listener
         // is itself null, then use the default listener
         // (which may be null as well!).
 
-        if (result == null)
-            result = getListener();
+        if (result == null) result = getListener();
 
         return result;
     }
 
     /**
-     * Construct a form name for use with the action service. This implementation returns "Form"
-     * appended with the actionId.
+     * Construct a form name for use with the action service. This
+     * implementation returns "Form" appended with the actionId.
      * 
      * @since 4.0
      */
@@ -284,9 +291,10 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     }
 
     /**
-     * Constructs a form name for use with the direct service. This implementation bases the form
-     * name on the form component's id (but ensures it is unique). Remember that Tapestry assigns an
-     * "ugly" id if an explicit component id is not provided.
+     * Constructs a form name for use with the direct service. This
+     * implementation bases the form name on the form component's id (but
+     * ensures it is unique). Remember that Tapestry assigns an "ugly" id if an
+     * explicit component id is not provided.
      * 
      * @since 4.0
      */
@@ -339,7 +347,8 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
     }
 
     /**
-     * Builds the EngineServiceLink for the form, using either the direct or action service.
+     * Builds the EngineServiceLink for the form, using either the direct or
+     * action service.
      * 
      * @since 1.0.3
      */
@@ -439,4 +448,4 @@ public abstract class Form extends AbstractComponent implements IForm, IDirect
         _formSupport.registerForFocus(field, priority);
     }
 
-}
\ No newline at end of file
+}