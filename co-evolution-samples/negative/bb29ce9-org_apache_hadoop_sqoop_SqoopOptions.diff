diff --git a/src/java/org/apache/hadoop/sqoop/SqoopOptions.java b/src/java/org/apache/hadoop/sqoop/SqoopOptions.java
index dcbdfa66..15354854 100644
--- a/src/java/org/apache/hadoop/sqoop/SqoopOptions.java
+++ b/src/java/org/apache/hadoop/sqoop/SqoopOptions.java
@@ -30,6 +30,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.sqoop.lib.LargeObjectLoader;
 import org.apache.hadoop.util.ToolRunner;
 import org.apache.log4j.Category;
 import org.apache.log4j.Level;
@@ -115,6 +116,9 @@ public String toString() {
   private boolean useCompression;
   private long directSplitSize; // In direct mode, open a new stream every X bytes.
 
+  private long maxInlineLobSize; // Max size of an inline LOB; larger LOBs are written
+                                 // to external files on disk.
+
   private String exportDir; // HDFS path to read from when performing an export
 
   private char inputFieldDelim;
@@ -275,6 +279,8 @@ private void initDefaults(Configuration baseConfiguration) {
     this.useCompression = false;
     this.directSplitSize = 0;
 
+    this.maxInlineLobSize = LargeObjectLoader.DEFAULT_MAX_LOB_LENGTH;
+
     if (null == baseConfiguration) {
       this.conf = new Configuration();
     } else {
@@ -328,6 +334,7 @@ public static void printUsage() {
     System.out.println("-z, --compress               Enable compression");
     System.out.println("--direct-split-size (n)      Split the input stream every 'n' bytes");
     System.out.println("                             when importing in direct mode.");
+    System.out.println("--inline-lob-limit (n)       Set the maximum size for an inline LOB");
     System.out.println("");
     System.out.println("Export options:");
     System.out.println("--export-dir (dir)           Export from an HDFS path into a table");
@@ -584,6 +591,8 @@ public void parse(String [] args) throws InvalidOptionsException {
           this.useCompression = true;
         } else if (args[i].equals("--direct-split-size")) {
           this.directSplitSize = Long.parseLong(args[++i]);
+        } else if (args[i].equals("--inline-lob-limit")) {
+          this.maxInlineLobSize = Long.parseLong(args[++i]);
         } else if (args[i].equals("--jar-file")) {
           this.existingJarFile = args[++i];
         } else if (args[i].equals("--list-databases")) {
@@ -1003,6 +1012,13 @@ public long getDirectSplitSize() {
     return this.directSplitSize;
   }
 
+  /**
+   * @return the max size of a LOB before we spill to a separate file.
+   */
+  public long getInlineLobLimit() {
+    return this.maxInlineLobSize;
+  }
+
   public Configuration getConf() {
     return conf;
   }