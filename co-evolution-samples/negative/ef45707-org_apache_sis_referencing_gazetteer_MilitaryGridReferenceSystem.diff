diff --git a/core/sis-referencing-by-identifiers/src/main/java/org/apache/sis/referencing/gazetteer/MilitaryGridReferenceSystem.java b/core/sis-referencing-by-identifiers/src/main/java/org/apache/sis/referencing/gazetteer/MilitaryGridReferenceSystem.java
index 1ef6fa726..b269e394e 100644
--- a/core/sis-referencing-by-identifiers/src/main/java/org/apache/sis/referencing/gazetteer/MilitaryGridReferenceSystem.java
+++ b/core/sis-referencing-by-identifiers/src/main/java/org/apache/sis/referencing/gazetteer/MilitaryGridReferenceSystem.java
@@ -634,7 +634,7 @@ public class MilitaryGridReferenceSystem extends ReferencingByIdentifiers {
          * This change is pending GeoAPI revision.</div>
          *
          * @param  reference  MGRS string to decode.
-         * @return a new position with the longitude at ordinate 0 and latitude at ordinate 1.
+         * @return a new position with the longitude at coordinate 0 and latitude at coordinate 1.
          * @throws TransformException if an error occurred while parsing the given string.
          */
         public AbstractLocation decode(final CharSequence reference) throws TransformException {
@@ -1474,7 +1474,7 @@ public class MilitaryGridReferenceSystem extends ReferencingByIdentifiers {
             final int zone       = isUTM ? ZONER.zone(φ, λ) : POLE;
             final int signedZone = MathFunctions.isNegative(φ) ? -zone : zone;
             if (signedZone == 0) {
-                // Zero value at this point is the result of NaN of infinite ordinate value.
+                // Zero value at this point is the result of NaN of infinite coordinate value.
                 throw new GazetteerException(Errors.format(Errors.Keys.NotANumber_1, "longitude"));
             }
             /*
@@ -2027,7 +2027,7 @@ parse:                  switch (part) {
                                 isValid = Math.abs(zoneError) <= 2;         // Tolerance in zone numbers for high latitudes.
                             } else {
                                 final double rλ = Math.IEEEremainder(λ - ZONER.origin, ZONER.width);    // Distance to closest zone change, in degrees of longitude.
-                                final double cv = (minX - ZONER.easting) / (λ - λ0);                    // Approximative conversion factor from degrees to metres.
+                                final double cv = (minX - ZONER.easting) / (λ - λ0);                    // Approximate conversion factor from degrees to metres.
                                 isValid = (Math.abs(rλ) * cv <= sx);                                    // Be tolerant if distance in metres is less than resolution.
                                 if (isValid) {
                                     isValid = (zoneError == (rλ < 0 ? -1 : +1));                        // Verify also that the error is on the side of the zone change.