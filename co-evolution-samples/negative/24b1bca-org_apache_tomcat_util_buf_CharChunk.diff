diff --git a/java/org/apache/tomcat/util/buf/CharChunk.java b/java/org/apache/tomcat/util/buf/CharChunk.java
index b5c0622cb9..d3086cb5a7 100644
--- a/java/org/apache/tomcat/util/buf/CharChunk.java
+++ b/java/org/apache/tomcat/util/buf/CharChunk.java
@@ -57,6 +57,11 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
     // --------------------
+
+    private int hashCode = 0;
+    // did we compute the hashcode ?
+    private boolean hasHashCode = false;
+
     // char[]
     private char buff[];
 
@@ -99,6 +104,7 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     public void recycle() {
         //        buff=null;
         isSet=false; // XXX
+        hasHashCode = false;
         start=0;
         end=0;
     }
@@ -113,6 +119,7 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
         start=0;
         end=0;
         isSet=true;
+        hasHashCode = false;
     }
 
 
@@ -125,6 +132,7 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
         start=off;
         end=start + len;
         isSet=true;
+        hasHashCode = false;
     }
 
     /** Maximum amount of data in this buffer.
@@ -455,6 +463,14 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
 
     // -------------------- equals --------------------
 
+    @Override
+    public boolean equals(Object obj) {
+        if (obj instanceof CharChunk) {
+            return equals((CharChunk) obj);
+        }
+        return false;
+    }
+
     /**
      * Compares the message bytes to the specified String object.
      * @param s the String to compare
@@ -578,6 +594,19 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
 
     // -------------------- Hash code  --------------------
 
+    @Override
+    public int hashCode() {
+        if (hasHashCode) {
+            return hashCode;
+        }
+        int code = 0;
+
+        code = hash();
+        hashCode = code;
+        hasHashCode = true;
+        return code;
+    }
+
     // normal hash.
     public int hash() {
         int code=0;