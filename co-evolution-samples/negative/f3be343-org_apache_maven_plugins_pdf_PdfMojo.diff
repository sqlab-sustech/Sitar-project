diff --git a/src/main/java/org/apache/maven/plugins/pdf/PdfMojo.java b/src/main/java/org/apache/maven/plugins/pdf/PdfMojo.java
index 8d8507c..84ac792 100644
--- a/src/main/java/org/apache/maven/plugins/pdf/PdfMojo.java
+++ b/src/main/java/org/apache/maven/plugins/pdf/PdfMojo.java
@@ -21,6 +21,7 @@ package org.apache.maven.plugins.pdf;
 
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.StringWriter;
@@ -30,6 +31,9 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
+import java.util.Properties;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
@@ -46,12 +50,14 @@ import org.apache.maven.doxia.docrenderer.pdf.PdfRenderer;
 import org.apache.maven.doxia.document.DocumentModel;
 import org.apache.maven.doxia.document.DocumentTOCItem;
 import org.apache.maven.doxia.document.io.xpp3.DocumentXpp3Writer;
+import org.apache.maven.doxia.logging.Log;
 import org.apache.maven.doxia.markup.HtmlMarkup;
 import org.apache.maven.doxia.module.xdoc.XdocSink;
 import org.apache.maven.doxia.parser.ParseException;
 import org.apache.maven.doxia.parser.manager.ParserNotFoundException;
 import org.apache.maven.doxia.sink.Sink;
 import org.apache.maven.doxia.sink.SinkAdapter;
+import org.apache.maven.doxia.sink.SinkEventAttributes;
 import org.apache.maven.doxia.site.decoration.DecorationModel;
 import org.apache.maven.doxia.site.decoration.io.xpp3.DecorationXpp3Reader;
 import org.apache.maven.doxia.siterenderer.Renderer;
@@ -84,7 +90,13 @@ import org.apache.maven.reporting.MavenReport;
 import org.apache.maven.reporting.MavenReportException;
 import org.apache.maven.settings.Settings;
 import org.codehaus.classworlds.ClassRealm;
+import org.codehaus.classworlds.NoSuchRealmException;
+import org.codehaus.plexus.PlexusConstants;
+import org.codehaus.plexus.PlexusContainer;
+import org.codehaus.plexus.context.Context;
+import org.codehaus.plexus.context.ContextException;
 import org.codehaus.plexus.i18n.I18N;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable;
 import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.PathTool;
@@ -103,7 +115,11 @@ import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
  */
 public class PdfMojo
     extends AbstractMojo
+    implements Contextualizable
 {
+    /** The Maven minor version, i.e. 0 if 2.0.10, 1 if 2.1.0 etc. */
+    private static final int MAVEN_MINOR_VERSION = getMavenMinorVersion();
+
     // ----------------------------------------------------------------------
     // Mojo components
     // ----------------------------------------------------------------------
@@ -353,6 +369,15 @@ public class PdfMojo
      */
     private List generatedMavenReports;
 
+
+    /**
+     * The current Plexus container.
+     * <b>Note</b>: its realm id should be <code>maven-pdf-plugin</code>
+     *
+     * @since 1.1
+     */
+    private PlexusContainer container;
+
     // ----------------------------------------------------------------------
     // Public methods
     // ----------------------------------------------------------------------
@@ -411,6 +436,13 @@ public class PdfMojo
         }
     }
 
+    /** {@inheritDoc} */
+    public void contextualize( Context context )
+        throws ContextException
+    {
+        container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
+    }
+
     // ----------------------------------------------------------------------
     // Private methods
     // ----------------------------------------------------------------------
@@ -1036,12 +1068,16 @@ public class PdfMojo
     private MavenReport getMavenReport( MojoDescriptor mojoDescriptor )
         throws MojoExecutionException
     {
+        /*
+         * container.getContainerRealm().getId() == maven-pdf-plugin
+         * session.getContainer().getContainerRealm().getId() == plexus.core
+         * mojoDescriptor.getPluginDescriptor().getClassRealm().getId() == a report plugin
+         */
         ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();
         try
         {
-            Thread.currentThread().setContextClassLoader(
-                                                          mojoDescriptor.getPluginDescriptor().getClassRealm()
-                                                                        .getClassLoader() );
+            Thread.currentThread()
+                  .setContextClassLoader( getClassRealm( mojoDescriptor.getPluginDescriptor() ).getClassLoader() );
 
             MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );
 
@@ -1069,6 +1105,50 @@ public class PdfMojo
         }
     }
 
+    /**
+     * Get the Classworlds ClassRealm instance from the given plugin descriptor.
+     * <br/>
+     * <b>Note</b>: For backward compatibility with Maven 2.0.x, some Doxia 1.1 interfaces will be imported from
+     * this Plexus container.
+     *
+     * @param pluginDescriptor not null
+     * @return the plugin descriptor ClassRealm with Doxia 1.1 interfaces in the Maven 2.0.x case.
+     * @since 1.1
+     * @see #MAVEN_MINOR_VERSION
+     */
+    private ClassRealm getClassRealm( PluginDescriptor pluginDescriptor)
+    {
+        if ( MAVEN_MINOR_VERSION == 0 )
+        {
+            String[] doxiaInterfaces =
+                new String[] { Sink.class.getName(), SinkEventAttributes.class.getName(), Log.class.getName() };
+
+            if ( getLog().isDebugEnabled() )
+            {
+                getLog().debug(
+                                "To be backward compatible with mvn 2.0.x, added Doxia 1.1.x interfaces from the PDF realm ("
+                                    + container.getContainerRealm().getId() + ") to the report plugin realm ("
+                                    + pluginDescriptor.getClassRealm().getId() + "): "
+                                    + StringUtils.join( doxiaInterfaces, ", " ) );
+            }
+
+            try
+            {
+                for ( int i = 0; i < doxiaInterfaces.length; i++ )
+                {
+                    pluginDescriptor.getClassRealm().importFrom( container.getContainerRealm().getId(),
+                                                                 doxiaInterfaces[i] );
+                }
+            }
+            catch ( NoSuchRealmException e )
+            {
+                getLog().error( "NoSuchRealmException: " + e.getMessage(), e );
+            }
+        }
+
+        return pluginDescriptor.getClassRealm();
+    }
+
     /**
      * Generate the given Maven report only if it is not an external report and the report could be generated.
      *
@@ -1585,6 +1665,66 @@ public class PdfMojo
         return excludesLocales;
     }
 
+     /**
+    * @return the current Maven version from <code>META-INF/maven/org.apache.maven/maven-core/pom.properties</code>
+    * or <code>null</code> if not found.
+    */
+    private static String getMavenVersion()
+    {
+        InputStream is = null;
+        try
+        {
+            is =
+                PdfMojo.class.getClassLoader()
+                             .getResourceAsStream( "META-INF/maven/org.apache.maven/maven-core/pom.properties" );
+
+            if ( is != null )
+            {
+                final Properties properties = new Properties();
+                properties.load( is );
+
+                return properties.getProperty( "version" );
+            }
+        }
+        catch ( IOException e )
+        {
+            // nop
+        }
+        finally
+        {
+            IOUtil.close( is );
+        }
+
+        return null;
+    }
+
+    /**
+     * All Maven versions respect this convention:
+     * <pre>
+     * &lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;
+     * </pre>
+     *
+     * @return the Maven minor version as int or 0.
+     * @see #getMavenVersion()
+     */
+    private static int getMavenMinorVersion()
+    {
+        final String mvnVersion = getMavenVersion();
+        if ( mvnVersion == null )
+        {
+            return 0;
+        }
+
+        final Pattern pattern = Pattern.compile( "(\\d+)\\.{1}(\\d+)(\\.{1}(\\d+))?" );
+        final Matcher matcher = pattern.matcher( mvnVersion );
+        if ( matcher.find() )
+        {
+            return Integer.valueOf( matcher.group( 2 ) ).intValue();
+        }
+
+        return 0;
+    }
+
     // ----------------------------------------------------------------------
     // Inner class
     // ----------------------------------------------------------------------